{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/category-page.js","path":"js/category-page.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-block.js","path":"js/code-block.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/links-page.js","path":"js/links-page.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/post-helper.js","path":"js/post-helper.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/css-vars.styl","path":"css/common/css-vars.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/font/css/brands.min.css","path":"font/css/brands.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/font/css/fontawesome.min.css","path":"font/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/font/css/regular.min.css","path":"font/css/regular.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/font/css/solid.min.css","path":"font/css/solid.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.ttf","path":"font/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.woff2","path":"font/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.ttf","path":"font/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.woff2","path":"font/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.ttf","path":"font/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.woff2","path":"font/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.ttf","path":"font/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.woff2","path":"font/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/aliyun.png","path":"images/deploy-provider/aliyun.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/gitee.png","path":"images/deploy-provider/gitee.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/github.png","path":"images/deploy-provider/github.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/netlify.png","path":"images/deploy-provider/netlify.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/tencent_cloud.png","path":"images/deploy-provider/tencent_cloud.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/upyun.png","path":"images/deploy-provider/upyun.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/deploy-provider/vercel.png","path":"images/deploy-provider/vercel.png","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/code-block.styl","path":"css/common/code-block/code-block.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/code-theme.styl","path":"css/common/code-block/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/highlight.styl","path":"css/common/code-block/highlight.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.png","path":"images/bg.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/tomcat.png","path":"images/tomcat.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/wechatcode.jpg","path":"images/wechatcode.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"baf406e78e9dc7dfefe331c837a582f763826c77","modified":1694252286378},{"_id":"source/about/index.md","hash":"363259393bbdfffce2208fd3d68631ca897c8e5b","modified":1696580526333},{"_id":"source/changelog/index.md","hash":"217bd7046db27d902008fa71b725b5072303356d","modified":1694252307371},{"_id":"source/tags/index.md","hash":"d971a3869b49d387e39a123b6c66967e376e5707","modified":1694252275375},{"_id":"source/links/index.md","hash":"788e561a6ddd7a2af28c5616ba00741df3e42785","modified":1694252267428},{"_id":"source/_posts/hello.md","hash":"4132265766d701aed530a3694bc67c917b7096ce","modified":1694251041798},{"_id":"themes/keep/.commitlintrc.js","hash":"3925f491e830dcb684933589cec3d4be8db0ff26","modified":1694163346000},{"_id":"themes/keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1694163346000},{"_id":"themes/keep/.gitignore","hash":"c4cd17a16e43203c7ae1ad41079a671e98ea52d5","modified":1694163346000},{"_id":"themes/keep/.npmignore","hash":"5f1a11e233e883dace7de8daac9e0f4d2ace6b1d","modified":1694163346000},{"_id":"themes/keep/.prettierrc","hash":"459178a4dff70a0885b6f5a49eb6a6265eea3083","modified":1694163346000},{"_id":"themes/keep/.stylelintrc.js","hash":"63ce9d43e8675a8cb771332c81c89ba7a60b5516","modified":1694163346000},{"_id":"themes/keep/.github/FUNDING.yml","hash":"abc482849db4978eb9ea0eb392d088a6733cea90","modified":1694163346000},{"_id":"themes/keep/.husky/commit-msg","hash":"acb6c4e5a6a3c713df9264e4d36798d6326580bb","modified":1694163346000},{"_id":"themes/keep/README.md","hash":"72e2b8b3ddc14cb3873ad0a17bc25a90f192924d","modified":1694163346000},{"_id":"themes/keep/CHANGELOG.md","hash":"c7778bbf912ee310a1a71acbbee12a3c3f8a1d8b","modified":1694163346000},{"_id":"themes/keep/package.json","hash":"32f8b58ba12deda0773b6fb4eca589cbb1a444b9","modified":1694163346000},{"_id":"themes/keep/_config.yml","hash":"b117ebff45c2865874807b0264ab4c72dea2e8d1","modified":1694413418645},{"_id":"themes/keep/.husky/pre-commit","hash":"12a9c8125c55c9cc29620696a0fa050ee61f9a2b","modified":1694163346000},{"_id":"themes/keep/languages/en.yml","hash":"f08015206d481b437ec4719b94e1a101b1a98005","modified":1694163346000},{"_id":"themes/keep/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1694163346000},{"_id":"themes/keep/languages/zh-CN.yml","hash":"71164a718221f344df91a5c86257d7bdb35eb84e","modified":1694163346000},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1694163346000},{"_id":"themes/keep/languages/zh-TW.yml","hash":"0ea464f74da6dad1b90f39cbf281f3fcd1a3ac97","modified":1694163346000},{"_id":"themes/keep/docs/README_zh-CN.md","hash":"b6594f28b00add834e2d93e22b5bd6d7a8b947f2","modified":1694163346000},{"_id":"themes/keep/layout/archive-content.ejs","hash":"e753c99c041f34f27d673e8c8da2f362ebeb2358","modified":1694163346000},{"_id":"themes/keep/layout/category-content.ejs","hash":"52fd66f1bccf5ffa790f6b408f42d885828409d1","modified":1694163346000},{"_id":"themes/keep/layout/category-list.ejs","hash":"4b0e41b6de6bec6238a6059b94e49e62de437d04","modified":1694163346000},{"_id":"themes/keep/layout/article-content.ejs","hash":"8d2e74e018e8e2857fcefa6c75ddce98da1c7c98","modified":1694163346000},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1694163346000},{"_id":"themes/keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1694163346000},{"_id":"themes/keep/layout/home-content.ejs","hash":"80d46652ca28761990ab1a57f71bfc948852d4b2","modified":1694163346000},{"_id":"themes/keep/layout/layout.ejs","hash":"636e099cc96d2b4f0de11ac77620bb513745ae76","modified":1694163346000},{"_id":"themes/keep/layout/page-template.ejs","hash":"52b829b9f16a5cab483541dc9cc4a734e9352035","modified":1694163346000},{"_id":"themes/keep/layout/tag-content.ejs","hash":"b305969138f2b08736fc75e95a9efca8eb5f4e90","modified":1694163346000},{"_id":"themes/keep/layout/page.ejs","hash":"18cddb83a069c1e5a4128621af26c6e2ddab113e","modified":1694163346000},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1694163346000},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1694163346000},{"_id":"themes/keep/.github/workflows/auto-merge.yml","hash":"1597492ba41e12feaab01e4a6cd0a2d6a49df826","modified":1694163346000},{"_id":"themes/keep/scripts/use-source-data.js","hash":"b29e05a8a9ba823cce7c6f6d8b1482aad5ff0d78","modified":1694163346000},{"_id":"themes/keep/docs/README_zh-TW.md","hash":"2105ec08453aa7ea8372bb295791daa635e4169c","modified":1694163346000},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/config.yml","hash":"c9aedf2c4d2b2addf1fa87260584938ed04ad442","modified":1694163346000},{"_id":"themes/keep/.github/workflows/release-version.yml","hash":"84c49bde4d73657f3a4a7013972e587d6822a5aa","modified":1694163346000},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"798c9eaa048e0002caba6fef989cc59420d02198","modified":1694163346000},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/other.yml","hash":"32b3885dfb1481d77148c22caad31e699974f348","modified":1694163346000},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"ee755f2d6c5f427efd5e673e1ef08530da067ade","modified":1694163346000},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"0973bea6b9da7726a01a4fd6fc6c3d6e6d4c133c","modified":1694163346000},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"42e0b650d47d080bb930c6d598f6ba25b79ce457","modified":1694163346000},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"f4d09e8b0fc2bf79c325c10fd2c09c8f803cdadc","modified":1694163346000},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"1f97263e7f22d97aed906ab87676b19fb45e9f3f","modified":1694163346000},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"6ebb8e7f315a18c65caf14d8dbbe1cc21bda4f7c","modified":1694163346000},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"a0f3041037ccd70ecdbcbf4fea4cf802533e7ac4","modified":1694163346000},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"05b35afeb615304df7376f6345a6907cda83d304","modified":1694163346000},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"13ab1396aa92e4bbaef055328d37fece77c011fe","modified":1694163346000},{"_id":"themes/keep/layout/_partial/image-mask.ejs","hash":"e785b4ca258ce378354216038ef544ca6ef4af51","modified":1694163346000},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"c7de89669e7269db469bfd4a56b7c4d8665f56af","modified":1694163346000},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"3c5ab4ac9c57bce3609f7d5f55429d8703ae2a1d","modified":1694163346000},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"18207b298e413fc6b89efc07aa63e8c95a06e56c","modified":1694163346000},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"befe6702c610b68dfa6b230a40fd713ec9a5e404","modified":1694163346000},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"42f8a56beb933df4aef5b38f18099ced99ef7a06","modified":1694163346000},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"fcf05324d0c8a7b4ab872c74b0b56782f4bafd16","modified":1694163346000},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"4ac6ea2dca2fb8e889a89ded4d04582b891db9e4","modified":1694163346000},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"fe968ec9942168a2994b4eb91a68c87f6aa35fe7","modified":1694163346000},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"90218c0b0af944e1cf6e23dbc0ba9088d31da86d","modified":1694163346000},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"124b61769eb63ee64ae92c4bcd5b041705f6521c","modified":1694163346000},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"e335e67b69745181f55599f7469c20fd44d05a77","modified":1694163346000},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"37a157254ba77fc365c8d9a365cd794cede49394","modified":1694163346000},{"_id":"themes/keep/source/css/style.styl","hash":"a82a0f0caf9ad7ce75d368e1a4c7599f21089be1","modified":1694163346000},{"_id":"themes/keep/source/js/back2top.js","hash":"201b362a12eef083b83560e8da226dc2e0696f5b","modified":1694163346000},{"_id":"themes/keep/source/js/category-page.js","hash":"48e5c9448a516ccc77faca113cde28a1b32b2fca","modified":1694163346000},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"4acefb833dc7ae70e3a0126b86895d2fd1fdde73","modified":1694163346000},{"_id":"themes/keep/source/js/code-block.js","hash":"2a8ec5a390a22b241d0530f1bc2b31099e2c8b98","modified":1694163346000},{"_id":"themes/keep/source/js/lazyload.js","hash":"d0e0878947b429ba59b0f952a498a05d6d77d0fa","modified":1694163346000},{"_id":"themes/keep/source/js/header-shrink.js","hash":"3c6fc16cff27f45312e4fbd05bba79c1d730001c","modified":1694163346000},{"_id":"themes/keep/source/js/links-page.js","hash":"d00dcf4c1717155823d58ec8940dcddac4529b06","modified":1694163346000},{"_id":"themes/keep/source/js/main.js","hash":"07408693d7cc2c59443ecebc4a4586b90dba9797","modified":1694163346000},{"_id":"themes/keep/source/js/local-search.js","hash":"35756189425600fdf39106c285784ec6ea9eb247","modified":1694163346000},{"_id":"themes/keep/source/js/utils.js","hash":"2b945897bab8992bcf214ac54ce4b9cea45ee2f6","modified":1694163346000},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"721b8faff8082b2e3698f642f139eeef005e675c","modified":1694163346000},{"_id":"themes/keep/layout/_partial/comment/giscus.ejs","hash":"32416c4927f7a98648ff4637707dc5f53932d56f","modified":1694163346000},{"_id":"themes/keep/source/images/avatar.svg","hash":"7b91d256891bb24fa0aff8d23c8941588efdf4ed","modified":1694205503842},{"_id":"themes/keep/source/js/toc.js","hash":"fb248fc6bb7ce53764ea9e70efd6b798de2c4d97","modified":1694163346000},{"_id":"themes/keep/source/images/logo.svg","hash":"68413a20688bc38116c63b994746d1c79b263eb0","modified":1694205409252},{"_id":"themes/keep/layout/_partial/common/empty-content.ejs","hash":"78402dfaf5f2ab9462b31039551ca0b5a991485f","modified":1694163346000},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"a42784effea9cff9c0873394872d5e82f250c722","modified":1694163346000},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"bc58b829e0b0a36ed0fabefd19bd0c733873200a","modified":1694163346000},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"2c7370bd0501fa3d893261306d583d6e82f78778","modified":1694163346000},{"_id":"themes/keep/source/js/post-helper.js","hash":"c242701b041e6cb991bd4fe134364ff2280eb891","modified":1694163346000},{"_id":"themes/keep/source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1694163346000},{"_id":"themes/keep/layout/_partial/comment/waline.ejs","hash":"ca6e523d6a77d397054d8d83de7604c0764f5f92","modified":1694163346000},{"_id":"themes/keep/source/css/common/animated.styl","hash":"2a8a4f96f848ead7247b24c3f7ea4be0ff19496e","modified":1694163346000},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"949d3fdd4bd215cd7d0c95152c4be630ce227e16","modified":1694163346000},{"_id":"themes/keep/source/css/common/basic.styl","hash":"b1f82894a3f8026f11ee431d156bb25d1eb9af5c","modified":1694163346000},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"9c214820ce267289779d857aae1140b6ce522ea5","modified":1694163346000},{"_id":"themes/keep/source/css/common/css-vars.styl","hash":"3297670dd96af7768f409ac4404d23be573619f9","modified":1694163346000},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"18f84f54b5190f9d0b2847958d0b3f6e12f90fcb","modified":1694163346000},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"52cdeff06fdbd298050e048589d51831648126bb","modified":1694163346000},{"_id":"themes/keep/source/css/common/variables.styl","hash":"15f567b71c230d793b4bfd656bc81cd3c803a545","modified":1694163346000},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"cffc6410e4dd4bd2a2675162ba5fa921d3515752","modified":1694163346000},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"8c4af54fe6baff84a6e11ec47ae990cc4bfc9cfd","modified":1694163346000},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"3a52fb8683490d30dba93fa045535b7ff512e6d4","modified":1694163346000},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1694163346000},{"_id":"themes/keep/source/font/css/brands.min.css","hash":"bb325aa1de092336cbce1281b36663b7fa198023","modified":1694163346000},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"fd5be93f3778907e16ff609225c58ae292c94a59","modified":1694163346000},{"_id":"themes/keep/source/css/layout/page.styl","hash":"9fdcc98b38ff4fa8613395694b3899ab24eca940","modified":1694163346000},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"8eeb05735bbbd45683339e5b46e49674a3ea47c7","modified":1694163346000},{"_id":"themes/keep/source/font/css/regular.min.css","hash":"58d2ff307db72217d6628940a3c07f9e982a3eea","modified":1694163346000},{"_id":"themes/keep/source/font/css/solid.min.css","hash":"f588237d4d8957093e2837c965ac78d059230f78","modified":1694163346000},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.ttf","hash":"9262ea1d0711b658bb75d5cbe9345e080c7dea90","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.woff2","hash":"56be4c28de7c67747b0fe3dd606be8b319f6d4f4","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.woff2","hash":"9e1f957bf329bd280aba89e578420301b312403d","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.ttf","hash":"b12c2b515fb62c370de1af4ca99635b00aabfe58","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"81390d314087ded32d273954f1f4f1e1ab2813bc","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/netlify.png","hash":"894e9d227c3ebe1ca05d431c74b61c716eaf4e4d","modified":1694163346000},{"_id":"themes/keep/source/css/common/code-block/code-block.styl","hash":"2fd3af4c446f9543bb9a992590d254b831169ab8","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"c8ff81bead9e5def42280841d3d4704bfbc476ed","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1694163346000},{"_id":"themes/keep/source/css/common/code-block/code-theme.styl","hash":"c44443a77754eceb111c8d23e6fa93b966cdb97d","modified":1694163346000},{"_id":"themes/keep/source/css/common/code-block/highlight.styl","hash":"21d73d7d61dfd3abd4e515a3986703498ca4ebdd","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"24c36066780ddbedbb000e58f37bd7fdfd61c3bf","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"ddf86818001d1ea23f88e745dc8a457a0be2b2a9","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"a03f740e21010fc90f6a76105a6226ccd896979e","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"ba965eb5230054feab9aad37c7668daf10281e3f","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/image-mask.styl","hash":"d3fb3d4beb0e8f3558d3010b7d28298600c2ae8f","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"2b2693e4ba24bb94d9aee4b7e72a0810f579ad76","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"c8621fa9f5a7a0d6ae716c3d2cd067b2f1504e8a","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"39157df0bd402d36438b2ced1ba2eb158e1f841e","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"a1d26275097061b7b53db5dc152c3e6f7adf9542","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"4381f98e236f22f380467005a2e4219bb7b82867","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/common/empty-content.styl","hash":"c9dbd9242f3a4251018e42de0026c410808f3f49","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"632a807c7ea483f76c2001bab55672b97d07f199","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"9764eef397d76df5e7467c16a55e12b3e8ee1ba8","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"fbd7d4545ebbed76ddd173c2b1c9a096a297e1f1","modified":1694163346000},{"_id":"themes/keep/source/images/deploy-provider/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"77a508bfc06e152c3ebd69a29bc3b0c9d7c86579","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"6344eabedc352463b3ae25e2ee28024c70bd31a2","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"df0b0cf4a778d1e1fbcade3d226ced1a74fdb38f","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"71ef4b5b22a63d567e48f76ccfaacc79ee40e7bc","modified":1694163346000},{"_id":"themes/keep/source/css/layout/_partial/comment/waline.styl","hash":"c125cadea4680ec3f08aa32ddabe3b2fed935dbe","modified":1694163346000},{"_id":"themes/keep/source/font/css/fontawesome.min.css","hash":"f2c5219fb9f58c2baee6dbd965741975cbc8ae71","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.woff2","hash":"380bea4e9eb484d835d89cc608f2af7c3179e8a4","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.ttf","hash":"42350ed503d66ae23a9c68d38966f25bc3007319","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.woff2","hash":"a7fca574d24e9ffa5ee0e0589ffe17277ae4ec27","modified":1694163346000},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.ttf","hash":"d2caaf5ce75d0da13ace325e24f7aa7079ef1891","modified":1694163346000},{"_id":"themes/keep/source/images/bg.png","hash":"0dde1fe29e5c200806700de0622bd2ff01b1bbff","modified":1696576434225},{"_id":"source/_posts/小红书企业效率部门后台实习生二面.md","hash":"5d17de81688caeffea28558fb6a7c824763ad3d4","modified":1696578139163},{"_id":"source/_posts/小红书企业效率部门后台实习生一面.md","hash":"9af7f4d716d1f2f465697d6d4545d0237840ffc6","modified":1696577874457},{"_id":"source/_posts/搜狐Linux研发实习生一面 .md","hash":"af64c0d52aa78c873a29ee12be1b808f2a5a4121","modified":1694275904893},{"_id":"source/_posts/哔哩哔哩-SRE后台实习生一面.md","hash":"e5f237cad51b4d5a481c86a0e6f46f9328ff04f1","modified":1696578629493},{"_id":"themes/keep/source/images/wechat.jpg","hash":"9f5021a15f62aabc643145768bbd03ab37959f6f","modified":1694275431411},{"_id":"source/_posts/基于大量数据的场景题.md","hash":"6df7428aac2cd5e8ef9f1232dd76eafd42bb4e93","modified":1694353318004},{"_id":"source/_posts/JRaft-jepsen-线性一致性测试.md","hash":"2c3bca3792d9bd28c70a52a316a9d1aa4bc6d208","modified":1694413523848},{"_id":"source/_posts/双亲委派模型应用及其规则的打破.md","hash":"2633043fbd5a04bee7cf33b0c79a2e705a793331","modified":1696580822563},{"_id":"source/_posts/海量数据处理场景.md","hash":"5892a2c591270eeacac3311d6841620594c6ad33","modified":1694451866007},{"_id":"themes/keep/source/images/tomcat.png","hash":"7de8d3b0fd35c95351ee657c9512314b7718caa7","modified":1696578820324},{"_id":"themes/keep/source/images/wechatcode.jpg","hash":"9f5021a15f62aabc643145768bbd03ab37959f6f","modified":1696574964494},{"_id":"public/atom.xml","hash":"4b2a29ce97205b74a135a413ddd6e9b5f7b43230","modified":1696579263473},{"_id":"public/search.json","hash":"6fb31f90218ce2cb900ab81ad408e0aa7c8eba2c","modified":1696579540706},{"_id":"public/changelog/index.html","hash":"62a51101a2272d4b7e04038976219466d77f265a","modified":1696579263473},{"_id":"public/links/index.html","hash":"d59a367a08618608c8da7cf926cae874594d674c","modified":1696579263473},{"_id":"public/tags/index.html","hash":"ea8cd20810a4f5cb560c80750398112743756ef9","modified":1696579263473},{"_id":"public/tags/面经/index.html","hash":"c16c6aee57d6167ba7ceba354f8d5d831de2ed8e","modified":1696579263473},{"_id":"public/tags/SOFA-JRaft/index.html","hash":"8da672aa80470e736c08aa12c2d4cd436c20a3af","modified":1696579263473},{"_id":"public/tags/场景题/index.html","hash":"ce9318443cc98d64dc20937fa2dee18fa3da7f06","modified":1696579263473},{"_id":"public/tags/JVM虚拟机/index.html","hash":"b7affe290c7e8d8f979b469eaaac6a5405a7da9b","modified":1696579263473},{"_id":"public/about/index.html","hash":"781385bd7168cbfb35314748cb915521cbf07392","modified":1696579540706},{"_id":"public/2023/09/11/双亲委派模型应用及其规则的打破/index.html","hash":"52e1b903c0cfc14fc234632eee9aa11d5062c0da","modified":1696579263473},{"_id":"public/2023/09/11/JRaft-jepsen-线性一致性测试/index.html","hash":"4f61abe5a84d5568704b2eb01d21b155976f4bdd","modified":1696579263473},{"_id":"public/2023/09/10/海量数据处理场景/index.html","hash":"5ad85a4ccb2ee5bd5362ef0cee4619d916685129","modified":1696579263473},{"_id":"public/2023/09/09/哔哩哔哩-SRE后台实习生一面/index.html","hash":"67f41da0a9956e2e7b49fde1cec51a5e0f813236","modified":1696579263473},{"_id":"public/2023/09/09/小红书企业效率部门后台实习生二面/index.html","hash":"b37ebd9d94965d61c29251c87250d843a8182d0c","modified":1696579263473},{"_id":"public/2023/09/09/小红书企业效率部门后台实习生一面/index.html","hash":"85d80cff861ba3c149794f9b2390a8d0a16c02d4","modified":1696579263473},{"_id":"public/2023/09/09/搜狐Linux研发实习生一面 /index.html","hash":"6aad7ce58f5c6dd768c2a0edeadc173507d62995","modified":1696579540706},{"_id":"public/index.html","hash":"019c617803014a2d1ca6ec94b572080d8ed85ba4","modified":1696579540706},{"_id":"public/images/avatar.svg","hash":"7b91d256891bb24fa0aff8d23c8941588efdf4ed","modified":1696579263473},{"_id":"public/images/logo.svg","hash":"68413a20688bc38116c63b994746d1c79b263eb0","modified":1696579263473},{"_id":"public/font/webfonts/fa-regular-400.ttf","hash":"9262ea1d0711b658bb75d5cbe9345e080c7dea90","modified":1696579263473},{"_id":"public/images/deploy-provider/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1696579263473},{"_id":"public/font/webfonts/fa-regular-400.woff2","hash":"56be4c28de7c67747b0fe3dd606be8b319f6d4f4","modified":1696579263473},{"_id":"public/font/webfonts/fa-v4compatibility.woff2","hash":"9e1f957bf329bd280aba89e578420301b312403d","modified":1696579263473},{"_id":"public/font/webfonts/fa-v4compatibility.ttf","hash":"b12c2b515fb62c370de1af4ca99635b00aabfe58","modified":1696579263473},{"_id":"public/images/deploy-provider/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1696579263473},{"_id":"public/images/deploy-provider/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1696579263473},{"_id":"public/images/deploy-provider/netlify.png","hash":"894e9d227c3ebe1ca05d431c74b61c716eaf4e4d","modified":1696579263473},{"_id":"public/images/deploy-provider/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1696579263473},{"_id":"public/images/deploy-provider/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1696579263473},{"_id":"public/images/deploy-provider/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1696579263473},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1696579263473},{"_id":"public/js/back2top.js","hash":"201b362a12eef083b83560e8da226dc2e0696f5b","modified":1696579263473},{"_id":"public/js/category-page.js","hash":"48e5c9448a516ccc77faca113cde28a1b32b2fca","modified":1696579263473},{"_id":"public/js/code-block.js","hash":"2a8ec5a390a22b241d0530f1bc2b31099e2c8b98","modified":1696579263473},{"_id":"public/js/header-shrink.js","hash":"3c6fc16cff27f45312e4fbd05bba79c1d730001c","modified":1696579263473},{"_id":"public/js/dark-light-toggle.js","hash":"4acefb833dc7ae70e3a0126b86895d2fd1fdde73","modified":1696579263473},{"_id":"public/js/lazyload.js","hash":"d0e0878947b429ba59b0f952a498a05d6d77d0fa","modified":1696579263473},{"_id":"public/js/links-page.js","hash":"d00dcf4c1717155823d58ec8940dcddac4529b06","modified":1696579263473},{"_id":"public/js/main.js","hash":"07408693d7cc2c59443ecebc4a4586b90dba9797","modified":1696579263473},{"_id":"public/js/local-search.js","hash":"35756189425600fdf39106c285784ec6ea9eb247","modified":1696579263473},{"_id":"public/js/toc.js","hash":"fb248fc6bb7ce53764ea9e70efd6b798de2c4d97","modified":1696579263473},{"_id":"public/js/post-helper.js","hash":"c242701b041e6cb991bd4fe134364ff2280eb891","modified":1696579263473},{"_id":"public/css/common/animated.css","hash":"c135a486ac2e9de54d880be551aa5d0aec6a87c0","modified":1696579263473},{"_id":"public/css/common/css-vars.css","hash":"028b7b6f2434afe9273c5eb0032b9bf71ee2e6f6","modified":1696579263473},{"_id":"public/css/layout/article-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1696579263473},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1696579263473},{"_id":"public/css/common/markdown.css","hash":"cb340fb7208a8048ade304acb268366ed9e5fe0d","modified":1696579263473},{"_id":"public/css/layout/category-content.css","hash":"2851320029732a3c81def66367167b15eac84aac","modified":1696579263473},{"_id":"public/css/common/basic.css","hash":"d990f1779356f511ca8910a4e8d56ded09309e5b","modified":1696579263473},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1696579263473},{"_id":"public/css/common/variables.css","hash":"9779fbfd1e272dbc172b77ff40b4f7f9708253e7","modified":1696579263473},{"_id":"public/css/style.css","hash":"c4078fa65a6c4bb06608a1f755e56f53bdde4e71","modified":1696579263473},{"_id":"public/js/utils.js","hash":"2b945897bab8992bcf214ac54ce4b9cea45ee2f6","modified":1696579263473},{"_id":"public/font/webfonts/fa-brands-400.woff2","hash":"380bea4e9eb484d835d89cc608f2af7c3179e8a4","modified":1696579263473},{"_id":"public/css/layout/category-list.css","hash":"3055c790941ab753c8ab45cef7a569a232e94a76","modified":1696579263473},{"_id":"public/css/layout/home-content.css","hash":"3b8f68de36d1dad1fcd5fc43d9d7a2060047324e","modified":1696579263473},{"_id":"public/css/layout/tag-content.css","hash":"243dc0c9aa16691126db13e6dae28a2de628cb00","modified":1696579263473},{"_id":"public/css/layout/page.css","hash":"c70082b6d11d262a5b0aef7fed059acd53022e9d","modified":1696579263473},{"_id":"public/font/css/regular.min.css","hash":"58d2ff307db72217d6628940a3c07f9e982a3eea","modified":1696579263473},{"_id":"public/font/css/solid.min.css","hash":"f588237d4d8957093e2837c965ac78d059230f78","modified":1696579263473},{"_id":"public/css/common/code-block/code-block.css","hash":"d92639d76ef1ee482fddee54c8c2c08f949bdf66","modified":1696579263473},{"_id":"public/css/common/code-block/highlight.css","hash":"61952315bb473283115f7aac0f03beac950f9e8e","modified":1696579263473},{"_id":"public/css/common/code-block/code-theme.css","hash":"69d1285e698a14feb74d9252dab5aef064420b7e","modified":1696579263473},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1696579263473},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1696579263473},{"_id":"public/font/css/brands.min.css","hash":"bb325aa1de092336cbce1281b36663b7fa198023","modified":1696579263473},{"_id":"public/font/css/fontawesome.min.css","hash":"f2c5219fb9f58c2baee6dbd965741975cbc8ae71","modified":1696579263473},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1696579263473},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1696579263473},{"_id":"public/font/webfonts/fa-brands-400.ttf","hash":"42350ed503d66ae23a9c68d38966f25bc3007319","modified":1696579263473},{"_id":"public/font/webfonts/fa-solid-900.woff2","hash":"a7fca574d24e9ffa5ee0e0589ffe17277ae4ec27","modified":1696579263473},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1696579263473},{"_id":"public/images/tomcat.png","hash":"7de8d3b0fd35c95351ee657c9512314b7718caa7","modified":1696579263473},{"_id":"public/font/webfonts/fa-solid-900.ttf","hash":"d2caaf5ce75d0da13ace325e24f7aa7079ef1891","modified":1696579263473},{"_id":"public/images/wechatcode.jpg","hash":"9f5021a15f62aabc643145768bbd03ab37959f6f","modified":1696579263473},{"_id":"public/images/bg.png","hash":"0dde1fe29e5c200806700de0622bd2ff01b1bbff","modified":1696579263473},{"_id":"source/_posts/回顾GSoC-2023RocketMQ社区的一次申请.md","hash":"23df8cf7f59083daf7a23ba3f1ec9d36913a7685","modified":1697294242173}],"Category":[{"name":"123","_id":"clmei19nb0005v0un0v223ft2"}],"Data":[],"Page":[{"title":"about","date":"2023-09-09T06:09:03.000Z","comment":true,"mathjax":true,"_content":"\n### 🌱 Basic Information\n- Undergraduate student of GDUT\n- Graduation in 2025 \n- Likes reading, coding and instrumental performance\n\n###  🔭 About Me\n- Contributor of SOFASTACK/SOFAJRaft\n- Contributor of Apache/RocketMQ\n- Student of OSPP-2023\n- Backend Development Intern of RED(小红书)\n\n###  🌏 Focus On\n- Distributed Message System\n- Distributed Consistency Algorithm\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-09-09 14:09:03\ncomment: true\nmathjax: true\n---\n\n### 🌱 Basic Information\n- Undergraduate student of GDUT\n- Graduation in 2025 \n- Likes reading, coding and instrumental performance\n\n###  🔭 About Me\n- Contributor of SOFASTACK/SOFAJRaft\n- Contributor of Apache/RocketMQ\n- Student of OSPP-2023\n- Backend Development Intern of RED(小红书)\n\n###  🌏 Focus On\n- Distributed Message System\n- Distributed Consistency Algorithm\n","updated":"2023-10-06T08:22:06.333Z","path":"about/index.html","_id":"clmbue4se0000ocuna3b8f2xr","comments":1,"layout":"page","content":"<h3 id=\"🌱-Basic-Information\"><a href=\"#🌱-Basic-Information\" class=\"headerlink\" title=\"🌱 Basic Information\"></a>🌱 Basic Information</h3><ul>\n<li>Undergraduate student of GDUT</li>\n<li>Graduation in 2025 </li>\n<li>Likes reading, coding and instrumental performance</li>\n</ul>\n<h3 id=\"🔭-About-Me\"><a href=\"#🔭-About-Me\" class=\"headerlink\" title=\"🔭 About Me\"></a>🔭 About Me</h3><ul>\n<li>Contributor of SOFASTACK/SOFAJRaft</li>\n<li>Contributor of Apache/RocketMQ</li>\n<li>Student of OSPP-2023</li>\n<li>Backend Development Intern of RED(小红书)</li>\n</ul>\n<h3 id=\"🌏-Focus-On\"><a href=\"#🌏-Focus-On\" class=\"headerlink\" title=\"🌏 Focus On\"></a>🌏 Focus On</h3><ul>\n<li>Distributed Message System</li>\n<li>Distributed Consistency Algorithm</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"🌱-Basic-Information\"><a href=\"#🌱-Basic-Information\" class=\"headerlink\" title=\"🌱 Basic Information\"></a>🌱 Basic Information</h3><ul>\n<li>Undergraduate student of GDUT</li>\n<li>Graduation in 2025 </li>\n<li>Likes reading, coding and instrumental performance</li>\n</ul>\n<h3 id=\"🔭-About-Me\"><a href=\"#🔭-About-Me\" class=\"headerlink\" title=\"🔭 About Me\"></a>🔭 About Me</h3><ul>\n<li>Contributor of SOFASTACK/SOFAJRaft</li>\n<li>Contributor of Apache/RocketMQ</li>\n<li>Student of OSPP-2023</li>\n<li>Backend Development Intern of RED(小红书)</li>\n</ul>\n<h3 id=\"🌏-Focus-On\"><a href=\"#🌏-Focus-On\" class=\"headerlink\" title=\"🌏 Focus On\"></a>🌏 Focus On</h3><ul>\n<li>Distributed Message System</li>\n<li>Distributed Consistency Algorithm</li>\n</ul>\n"},{"title":"changelog","date":"2023-09-09T09:38:27.000Z","_content":"","source":"changelog/index.md","raw":"---\ntitle: changelog\ndate: 2023-09-09 17:38:27\n---\n","updated":"2023-09-09T09:38:27.371Z","path":"changelog/index.html","comments":1,"layout":"page","_id":"clmbue4sh0002ocun5gyfeq8a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"links","date":"2023-09-09T09:37:47.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2023-09-09 17:37:47\n---\n","updated":"2023-09-09T09:37:47.428Z","path":"links/index.html","comments":1,"layout":"page","_id":"clmbue4sh0003ocunfni91p0o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-09-09T09:37:55.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-09-09 17:37:55\n---\n","updated":"2023-09-09T09:37:55.375Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clmbue4si0004ocun5cvza67r","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"搜狐Linux研发实习生一面","date":"2023-09-08T20:14:06.000Z","mathjax":true,"_content":"> **记录第一次面试，没怎么准备充分。不过面试官人很好，很有耐心。**\n> **整场面试没问业务项目，开源项目也只是简单问了一下，可能和招的岗位有关。**\n> **问了linux、git相关的问题，掌握不太牢固。**\n\n**时间：2023.8.31**   \n**时长：40min**\n**算法：<层序遍历二叉树>**\n**投递：牛客网**\n\n1. 自我介绍\n2. 问了下岗位是做啥的，面试官说运维，部署点东西啥的\n3. 愿意转方向吗?我看你简历是后端开发\n4. TCP和UDP的区别\n5. 进程间通信的方式有哪些\n6. linux查看文件的命令（说了cat，好像还有more，less）\n7. vim修改文件的过程，怎样修改，怎样保存退出（Esc：wq!）\n8. mysql默认的隔离级别\n9. mysql有哪些隔离级别\n10. 解释下MVCC\n11. docker内怎么查看容器内日志\n12. shell脚本有写过吗\n13. git暂存是什么命令（git stash、git stash pop）\n14. git如何将代码同时上传到多个远程仓库（寄）\n15. Rocketmq你做了什么，5.0相比4.X多做了哪些适配？\n16. JRaft你做了什么\n17. 做开源是兴趣还是为了找工作\n18. 怎么理解cap\n19. 今后想往什么方向发展\n20. 怎么理解云原生\n21. 平时是怎么学习新知识的\n\n算法：二叉树层序遍历（寄）跟面试官说算法没咋准备，就说了思路（递归dfs）\n反问：之后学习有哪些建议：深度和广度","source":"_posts/搜狐Linux研发实习生一面 .md","raw":"---\ntitle: 搜狐Linux研发实习生一面\ndate: 2023-09-09 04:14:06\ntags: 面经\nmathjax: true\n---\n> **记录第一次面试，没怎么准备充分。不过面试官人很好，很有耐心。**\n> **整场面试没问业务项目，开源项目也只是简单问了一下，可能和招的岗位有关。**\n> **问了linux、git相关的问题，掌握不太牢固。**\n\n**时间：2023.8.31**   \n**时长：40min**\n**算法：<层序遍历二叉树>**\n**投递：牛客网**\n\n1. 自我介绍\n2. 问了下岗位是做啥的，面试官说运维，部署点东西啥的\n3. 愿意转方向吗?我看你简历是后端开发\n4. TCP和UDP的区别\n5. 进程间通信的方式有哪些\n6. linux查看文件的命令（说了cat，好像还有more，less）\n7. vim修改文件的过程，怎样修改，怎样保存退出（Esc：wq!）\n8. mysql默认的隔离级别\n9. mysql有哪些隔离级别\n10. 解释下MVCC\n11. docker内怎么查看容器内日志\n12. shell脚本有写过吗\n13. git暂存是什么命令（git stash、git stash pop）\n14. git如何将代码同时上传到多个远程仓库（寄）\n15. Rocketmq你做了什么，5.0相比4.X多做了哪些适配？\n16. JRaft你做了什么\n17. 做开源是兴趣还是为了找工作\n18. 怎么理解cap\n19. 今后想往什么方向发展\n20. 怎么理解云原生\n21. 平时是怎么学习新知识的\n\n算法：二叉树层序遍历（寄）跟面试官说算法没咋准备，就说了思路（递归dfs）\n反问：之后学习有哪些建议：深度和广度","slug":"搜狐Linux研发实习生一面 ","published":1,"updated":"2023-09-09T16:11:44.893Z","_id":"clmbv15gk0007ocun9eomcuam","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><strong>记录第一次面试，没怎么准备充分。不过面试官人很好，很有耐心。</strong><br>\n<strong>整场面试没问业务项目，开源项目也只是简单问了一下，可能和招的岗位有关。</strong><br>\n<strong>问了linux、git相关的问题，掌握不太牢固。</strong></p>\n</blockquote>\n<p><strong>时间：2023.8.31</strong><br>\n<strong>时长：40min</strong><br>\n<strong>算法：&lt;层序遍历二叉树&gt;</strong><br>\n<strong>投递：牛客网</strong></p>\n<ol>\n<li>自我介绍</li>\n<li>问了下岗位是做啥的，面试官说运维，部署点东西啥的</li>\n<li>愿意转方向吗?我看你简历是后端开发</li>\n<li>TCP和UDP的区别</li>\n<li>进程间通信的方式有哪些</li>\n<li>linux查看文件的命令（说了cat，好像还有more，less）</li>\n<li>vim修改文件的过程，怎样修改，怎样保存退出（Esc：wq!）</li>\n<li>mysql默认的隔离级别</li>\n<li>mysql有哪些隔离级别</li>\n<li>解释下MVCC</li>\n<li>docker内怎么查看容器内日志</li>\n<li>shell脚本有写过吗</li>\n<li>git暂存是什么命令（git stash、git stash pop）</li>\n<li>git如何将代码同时上传到多个远程仓库（寄）</li>\n<li>Rocketmq你做了什么，5.0相比4.X多做了哪些适配？</li>\n<li>JRaft你做了什么</li>\n<li>做开源是兴趣还是为了找工作</li>\n<li>怎么理解cap</li>\n<li>今后想往什么方向发展</li>\n<li>怎么理解云原生</li>\n<li>平时是怎么学习新知识的</li>\n</ol>\n<p>算法：二叉树层序遍历（寄）跟面试官说算法没咋准备，就说了思路（递归dfs）<br>\n反问：之后学习有哪些建议：深度和广度</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>记录第一次面试，没怎么准备充分。不过面试官人很好，很有耐心。</strong><br>\n<strong>整场面试没问业务项目，开源项目也只是简单问了一下，可能和招的岗位有关。</strong><br>\n<strong>问了linux、git相关的问题，掌握不太牢固。</strong></p>\n</blockquote>\n<p><strong>时间：2023.8.31</strong><br>\n<strong>时长：40min</strong><br>\n<strong>算法：&lt;层序遍历二叉树&gt;</strong><br>\n<strong>投递：牛客网</strong></p>\n<ol>\n<li>自我介绍</li>\n<li>问了下岗位是做啥的，面试官说运维，部署点东西啥的</li>\n<li>愿意转方向吗?我看你简历是后端开发</li>\n<li>TCP和UDP的区别</li>\n<li>进程间通信的方式有哪些</li>\n<li>linux查看文件的命令（说了cat，好像还有more，less）</li>\n<li>vim修改文件的过程，怎样修改，怎样保存退出（Esc：wq!）</li>\n<li>mysql默认的隔离级别</li>\n<li>mysql有哪些隔离级别</li>\n<li>解释下MVCC</li>\n<li>docker内怎么查看容器内日志</li>\n<li>shell脚本有写过吗</li>\n<li>git暂存是什么命令（git stash、git stash pop）</li>\n<li>git如何将代码同时上传到多个远程仓库（寄）</li>\n<li>Rocketmq你做了什么，5.0相比4.X多做了哪些适配？</li>\n<li>JRaft你做了什么</li>\n<li>做开源是兴趣还是为了找工作</li>\n<li>怎么理解cap</li>\n<li>今后想往什么方向发展</li>\n<li>怎么理解云原生</li>\n<li>平时是怎么学习新知识的</li>\n</ol>\n<p>算法：二叉树层序遍历（寄）跟面试官说算法没咋准备，就说了思路（递归dfs）<br>\n反问：之后学习有哪些建议：深度和广度</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 10 2023 00:11:44 GMT+0800 (中国标准时间)","title":"搜狐Linux研发实习生一面","path":"2023/09/09/搜狐Linux研发实习生一面 /","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-08T20:14:06.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-08T20:14:06.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["面经"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"小红书企业效率部门后台实习生一面","date":"2023-09-09T10:10:38.000Z","_content":"\n> 面试官的电脑坏了，打电话通知我用腾讯会议面,还一直抱歉，挺礼貌的面试官。\n> 上来就说只面三十分钟，不知道是不是KPI面，看起来有点累。\n> 算法题没写完，说了思路，大概面了40min，走得很匆忙，可能工作很忙或者还有其他人约面。\n\n**时间：2023.9.2**\n**算法：前序遍历二叉树+层序遍历二叉树**\n**时长：40min**\n**投递：脉脉**\n\n**八股篇**\n\n1. ArrayList和LinkedList区别\n2. 为什么Linkedlist的插入会比ArrayList插入效率高\n3. HashMap知道吧，他有什么问题（说了线程不安全，头插死循环、同时put覆盖，并发put、get可能为空）\n4. 说说头插法和尾插法\n5. HashTable为什么线程安全\n6. ConcurrentHashMap1.7和1.8线程安全怎么做的（分段锁->sychronized+CAS）\n7. JDK1.8里的 sychronized 锁是锁的哪里（数组节点）\n\n**业务项目篇**\n\n1. token无感刷新怎么做的（accessToken、refreshToken）\n2. 前端每次发请求都要带两个token吗？\n3. 说说布隆过滤器的结构\n4. 布隆过滤器有什么缺点（说了查询误判）\n5. 布隆过滤器的元素能否删除（不能）\n6. 布隆过滤器如何提高容错能力\n7. 知不知道布谷鸟过滤器？（不知道）\n8. 全局异常处理器怎么做的？\n9. 怎么没用Spring自带的@ExceptionHandler，我说就是用的这个\n10. 你项目用了rabbitmq是吧，为什么弃用了原有的自旋重试机制\n11. mq除了解耦，还有哪些功能？（削峰、异步）\n12. mq怎么保证事务的（我说知道事务消息，不过项目里没用，面试官应该是想问事务消息是怎么实现的）\n13. 喜欢看什么书（我说计算机，或者人文社科？他说这玩意儿不是看了就睡着了吗）\n14. 有什么爱好\n\n**算法篇**\n\n1. 前序遍历二叉树\n2. 层序遍历二叉树\n\n**反问**\n\n1. 部门是啥，做什么的：企业效率人事后台\n2. 技术栈是哪些（mysql、redis、es、rocketmq、自研网关、自研kv存储、k8s那套）\n3. 今天表现咋样（基础挺扎实的，沟通也不错，还有两个开源项目没时间问了，等二面面试官再问吧）\n\n\n\n\n","source":"_posts/小红书企业效率部门后台实习生一面.md","raw":"---\ntitle: 小红书企业效率部门后台实习生一面\ndate: 2023-09-09 18:10:38\ntags: 面经\n---\n\n> 面试官的电脑坏了，打电话通知我用腾讯会议面,还一直抱歉，挺礼貌的面试官。\n> 上来就说只面三十分钟，不知道是不是KPI面，看起来有点累。\n> 算法题没写完，说了思路，大概面了40min，走得很匆忙，可能工作很忙或者还有其他人约面。\n\n**时间：2023.9.2**\n**算法：前序遍历二叉树+层序遍历二叉树**\n**时长：40min**\n**投递：脉脉**\n\n**八股篇**\n\n1. ArrayList和LinkedList区别\n2. 为什么Linkedlist的插入会比ArrayList插入效率高\n3. HashMap知道吧，他有什么问题（说了线程不安全，头插死循环、同时put覆盖，并发put、get可能为空）\n4. 说说头插法和尾插法\n5. HashTable为什么线程安全\n6. ConcurrentHashMap1.7和1.8线程安全怎么做的（分段锁->sychronized+CAS）\n7. JDK1.8里的 sychronized 锁是锁的哪里（数组节点）\n\n**业务项目篇**\n\n1. token无感刷新怎么做的（accessToken、refreshToken）\n2. 前端每次发请求都要带两个token吗？\n3. 说说布隆过滤器的结构\n4. 布隆过滤器有什么缺点（说了查询误判）\n5. 布隆过滤器的元素能否删除（不能）\n6. 布隆过滤器如何提高容错能力\n7. 知不知道布谷鸟过滤器？（不知道）\n8. 全局异常处理器怎么做的？\n9. 怎么没用Spring自带的@ExceptionHandler，我说就是用的这个\n10. 你项目用了rabbitmq是吧，为什么弃用了原有的自旋重试机制\n11. mq除了解耦，还有哪些功能？（削峰、异步）\n12. mq怎么保证事务的（我说知道事务消息，不过项目里没用，面试官应该是想问事务消息是怎么实现的）\n13. 喜欢看什么书（我说计算机，或者人文社科？他说这玩意儿不是看了就睡着了吗）\n14. 有什么爱好\n\n**算法篇**\n\n1. 前序遍历二叉树\n2. 层序遍历二叉树\n\n**反问**\n\n1. 部门是啥，做什么的：企业效率人事后台\n2. 技术栈是哪些（mysql、redis、es、rocketmq、自研网关、自研kv存储、k8s那套）\n3. 今天表现咋样（基础挺扎实的，沟通也不错，还有两个开源项目没时间问了，等二面面试官再问吧）\n\n\n\n\n","slug":"小红书企业效率部门后台实习生一面","published":1,"updated":"2023-10-06T07:37:54.457Z","_id":"clmbyfolp0000x4un13tp70yc","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>面试官的电脑坏了，打电话通知我用腾讯会议面,还一直抱歉，挺礼貌的面试官。<br>上来就说只面三十分钟，不知道是不是KPI面，看起来有点累。<br>算法题没写完，说了思路，大概面了40min，走得很匆忙，可能工作很忙或者还有其他人约面。</p>\n</blockquote>\n<p><strong>时间：2023.9.2</strong><br><strong>算法：前序遍历二叉树+层序遍历二叉树</strong><br><strong>时长：40min</strong><br><strong>投递：脉脉</strong></p>\n<p><strong>八股篇</strong></p>\n<ol>\n<li>ArrayList和LinkedList区别</li>\n<li>为什么Linkedlist的插入会比ArrayList插入效率高</li>\n<li>HashMap知道吧，他有什么问题（说了线程不安全，头插死循环、同时put覆盖，并发put、get可能为空）</li>\n<li>说说头插法和尾插法</li>\n<li>HashTable为什么线程安全</li>\n<li>ConcurrentHashMap1.7和1.8线程安全怎么做的（分段锁-&gt;sychronized+CAS）</li>\n<li>JDK1.8里的 sychronized 锁是锁的哪里（数组节点）</li>\n</ol>\n<p><strong>业务项目篇</strong></p>\n<ol>\n<li>token无感刷新怎么做的（accessToken、refreshToken）</li>\n<li>前端每次发请求都要带两个token吗？</li>\n<li>说说布隆过滤器的结构</li>\n<li>布隆过滤器有什么缺点（说了查询误判）</li>\n<li>布隆过滤器的元素能否删除（不能）</li>\n<li>布隆过滤器如何提高容错能力</li>\n<li>知不知道布谷鸟过滤器？（不知道）</li>\n<li>全局异常处理器怎么做的？</li>\n<li>怎么没用Spring自带的@ExceptionHandler，我说就是用的这个</li>\n<li>你项目用了rabbitmq是吧，为什么弃用了原有的自旋重试机制</li>\n<li>mq除了解耦，还有哪些功能？（削峰、异步）</li>\n<li>mq怎么保证事务的（我说知道事务消息，不过项目里没用，面试官应该是想问事务消息是怎么实现的）</li>\n<li>喜欢看什么书（我说计算机，或者人文社科？他说这玩意儿不是看了就睡着了吗）</li>\n<li>有什么爱好</li>\n</ol>\n<p><strong>算法篇</strong></p>\n<ol>\n<li>前序遍历二叉树</li>\n<li>层序遍历二叉树</li>\n</ol>\n<p><strong>反问</strong></p>\n<ol>\n<li>部门是啥，做什么的：企业效率人事后台</li>\n<li>技术栈是哪些（mysql、redis、es、rocketmq、自研网关、自研kv存储、k8s那套）</li>\n<li>今天表现咋样（基础挺扎实的，沟通也不错，还有两个开源项目没时间问了，等二面面试官再问吧）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>面试官的电脑坏了，打电话通知我用腾讯会议面,还一直抱歉，挺礼貌的面试官。<br>上来就说只面三十分钟，不知道是不是KPI面，看起来有点累。<br>算法题没写完，说了思路，大概面了40min，走得很匆忙，可能工作很忙或者还有其他人约面。</p>\n</blockquote>\n<p><strong>时间：2023.9.2</strong><br><strong>算法：前序遍历二叉树+层序遍历二叉树</strong><br><strong>时长：40min</strong><br><strong>投递：脉脉</strong></p>\n<p><strong>八股篇</strong></p>\n<ol>\n<li>ArrayList和LinkedList区别</li>\n<li>为什么Linkedlist的插入会比ArrayList插入效率高</li>\n<li>HashMap知道吧，他有什么问题（说了线程不安全，头插死循环、同时put覆盖，并发put、get可能为空）</li>\n<li>说说头插法和尾插法</li>\n<li>HashTable为什么线程安全</li>\n<li>ConcurrentHashMap1.7和1.8线程安全怎么做的（分段锁-&gt;sychronized+CAS）</li>\n<li>JDK1.8里的 sychronized 锁是锁的哪里（数组节点）</li>\n</ol>\n<p><strong>业务项目篇</strong></p>\n<ol>\n<li>token无感刷新怎么做的（accessToken、refreshToken）</li>\n<li>前端每次发请求都要带两个token吗？</li>\n<li>说说布隆过滤器的结构</li>\n<li>布隆过滤器有什么缺点（说了查询误判）</li>\n<li>布隆过滤器的元素能否删除（不能）</li>\n<li>布隆过滤器如何提高容错能力</li>\n<li>知不知道布谷鸟过滤器？（不知道）</li>\n<li>全局异常处理器怎么做的？</li>\n<li>怎么没用Spring自带的@ExceptionHandler，我说就是用的这个</li>\n<li>你项目用了rabbitmq是吧，为什么弃用了原有的自旋重试机制</li>\n<li>mq除了解耦，还有哪些功能？（削峰、异步）</li>\n<li>mq怎么保证事务的（我说知道事务消息，不过项目里没用，面试官应该是想问事务消息是怎么实现的）</li>\n<li>喜欢看什么书（我说计算机，或者人文社科？他说这玩意儿不是看了就睡着了吗）</li>\n<li>有什么爱好</li>\n</ol>\n<p><strong>算法篇</strong></p>\n<ol>\n<li>前序遍历二叉树</li>\n<li>层序遍历二叉树</li>\n</ol>\n<p><strong>反问</strong></p>\n<ol>\n<li>部门是啥，做什么的：企业效率人事后台</li>\n<li>技术栈是哪些（mysql、redis、es、rocketmq、自研网关、自研kv存储、k8s那套）</li>\n<li>今天表现咋样（基础挺扎实的，沟通也不错，还有两个开源项目没时间问了，等二面面试官再问吧）</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Oct 06 2023 15:37:54 GMT+0800 (中国标准时间)","title":"小红书企业效率部门后台实习生一面","path":"2023/09/09/小红书企业效率部门后台实习生一面/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-09T10:10:38.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-09T10:10:38.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["面经"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"小红书企业效率部门后台实习生二面","date":"2023-09-09T10:11:46.000Z","_content":"> 我提前几分钟进去的时候，面试官已经到了，对这面试官印象特别好。\n> 下午刚面完b站一面，头还有点昏。\n> 二面面试官很nice，上来也是说只面30min，不知道是传统还是KPI面\n> 问的问题特别灵活，基本没问八股。\n\n\n**时间：2023.9.4 17:30**\n**时长：50min**\n**算法：无手撕**\n**投递：脉脉**\n\n**拷打：**\n\n1. 一面自我评价怎么样？\n2. 觉得一面面试官怎么样？我说特别和蔼可亲\n3. 为什么会想做开源，说说做开源的契机（吹水...）\n4. 如果小红书内部需要做一个starter，你会从哪些方面去考虑、设计\n5. Rocketmq延迟消息底层是怎么设计的（提了延迟级别，修改topic为SCHEDULE_TOPIC_XXXX）\n6. 那你说说ScheduleMessageService怎么拉延时消息的（忘了）\n7. mysql的查询能做哪些优化（说了索引、避免回表）然后喊停\n8. 知道哪些中间件用到了raft算法（答了etcd，TiKV，rocketmq，kafka，nacos）\n9. 算法刷得咋样了，会不会接雨水（人傻了）\n10. 学校那些课咋办\n11. 手里有不有其他offer，你愿意来上海吗？\n\n**场景题：**\n\n1. 坐过高铁吧，有抢过票吗。你说说抢票会有哪些情况？（线程安全问题，加锁。比如同时读到共享变量，然后修改）\n2. 那你说的是一种情况，读到的值是正确的，还有其他情况吗？（读的缓存，缓存没更新，mysql和redis数据不一致）\n3. 那对于数据不一致我们一般怎么处理？\n4. 现在我们来给12306抢票系统设计一个缓存，kv存什么？\n\n面试官一直在引导我，花了大概十多分钟。答得不是很好。\n**反问+聊天：**\n\n1. 今天的面试评价咋样\n2. 部门是做什么的\n3. 面试官您怎么看基架和业务（面试官对这个话题好像很感兴趣，聊了很久，吹水ing...）\n\n","source":"_posts/小红书企业效率部门后台实习生二面.md","raw":"---\ntitle: 小红书企业效率部门后台实习生二面\ndate: 2023-09-09 18:11:46\ntags: 面经\n---\n> 我提前几分钟进去的时候，面试官已经到了，对这面试官印象特别好。\n> 下午刚面完b站一面，头还有点昏。\n> 二面面试官很nice，上来也是说只面30min，不知道是传统还是KPI面\n> 问的问题特别灵活，基本没问八股。\n\n\n**时间：2023.9.4 17:30**\n**时长：50min**\n**算法：无手撕**\n**投递：脉脉**\n\n**拷打：**\n\n1. 一面自我评价怎么样？\n2. 觉得一面面试官怎么样？我说特别和蔼可亲\n3. 为什么会想做开源，说说做开源的契机（吹水...）\n4. 如果小红书内部需要做一个starter，你会从哪些方面去考虑、设计\n5. Rocketmq延迟消息底层是怎么设计的（提了延迟级别，修改topic为SCHEDULE_TOPIC_XXXX）\n6. 那你说说ScheduleMessageService怎么拉延时消息的（忘了）\n7. mysql的查询能做哪些优化（说了索引、避免回表）然后喊停\n8. 知道哪些中间件用到了raft算法（答了etcd，TiKV，rocketmq，kafka，nacos）\n9. 算法刷得咋样了，会不会接雨水（人傻了）\n10. 学校那些课咋办\n11. 手里有不有其他offer，你愿意来上海吗？\n\n**场景题：**\n\n1. 坐过高铁吧，有抢过票吗。你说说抢票会有哪些情况？（线程安全问题，加锁。比如同时读到共享变量，然后修改）\n2. 那你说的是一种情况，读到的值是正确的，还有其他情况吗？（读的缓存，缓存没更新，mysql和redis数据不一致）\n3. 那对于数据不一致我们一般怎么处理？\n4. 现在我们来给12306抢票系统设计一个缓存，kv存什么？\n\n面试官一直在引导我，花了大概十多分钟。答得不是很好。\n**反问+聊天：**\n\n1. 今天的面试评价咋样\n2. 部门是做什么的\n3. 面试官您怎么看基架和业务（面试官对这个话题好像很感兴趣，聊了很久，吹水ing...）\n\n","slug":"小红书企业效率部门后台实习生二面","published":1,"updated":"2023-10-06T07:42:19.163Z","_id":"clmbyfolt0001x4unckpn5ti6","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>我提前几分钟进去的时候，面试官已经到了，对这面试官印象特别好。<br>下午刚面完b站一面，头还有点昏。<br>二面面试官很nice，上来也是说只面30min，不知道是传统还是KPI面<br>问的问题特别灵活，基本没问八股。</p>\n</blockquote>\n<p><strong>时间：2023.9.4 17:30</strong><br><strong>时长：50min</strong><br><strong>算法：无手撕</strong><br><strong>投递：脉脉</strong></p>\n<p><strong>拷打：</strong></p>\n<ol>\n<li>一面自我评价怎么样？</li>\n<li>觉得一面面试官怎么样？我说特别和蔼可亲</li>\n<li>为什么会想做开源，说说做开源的契机（吹水…）</li>\n<li>如果小红书内部需要做一个starter，你会从哪些方面去考虑、设计</li>\n<li>Rocketmq延迟消息底层是怎么设计的（提了延迟级别，修改topic为SCHEDULE_TOPIC_XXXX）</li>\n<li>那你说说ScheduleMessageService怎么拉延时消息的（忘了）</li>\n<li>mysql的查询能做哪些优化（说了索引、避免回表）然后喊停</li>\n<li>知道哪些中间件用到了raft算法（答了etcd，TiKV，rocketmq，kafka，nacos）</li>\n<li>算法刷得咋样了，会不会接雨水（人傻了）</li>\n<li>学校那些课咋办</li>\n<li>手里有不有其他offer，你愿意来上海吗？</li>\n</ol>\n<p><strong>场景题：</strong></p>\n<ol>\n<li>坐过高铁吧，有抢过票吗。你说说抢票会有哪些情况？（线程安全问题，加锁。比如同时读到共享变量，然后修改）</li>\n<li>那你说的是一种情况，读到的值是正确的，还有其他情况吗？（读的缓存，缓存没更新，mysql和redis数据不一致）</li>\n<li>那对于数据不一致我们一般怎么处理？</li>\n<li>现在我们来给12306抢票系统设计一个缓存，kv存什么？</li>\n</ol>\n<p>面试官一直在引导我，花了大概十多分钟。答得不是很好。<br><strong>反问+聊天：</strong></p>\n<ol>\n<li>今天的面试评价咋样</li>\n<li>部门是做什么的</li>\n<li>面试官您怎么看基架和业务（面试官对这个话题好像很感兴趣，聊了很久，吹水ing…）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>我提前几分钟进去的时候，面试官已经到了，对这面试官印象特别好。<br>下午刚面完b站一面，头还有点昏。<br>二面面试官很nice，上来也是说只面30min，不知道是传统还是KPI面<br>问的问题特别灵活，基本没问八股。</p>\n</blockquote>\n<p><strong>时间：2023.9.4 17:30</strong><br><strong>时长：50min</strong><br><strong>算法：无手撕</strong><br><strong>投递：脉脉</strong></p>\n<p><strong>拷打：</strong></p>\n<ol>\n<li>一面自我评价怎么样？</li>\n<li>觉得一面面试官怎么样？我说特别和蔼可亲</li>\n<li>为什么会想做开源，说说做开源的契机（吹水…）</li>\n<li>如果小红书内部需要做一个starter，你会从哪些方面去考虑、设计</li>\n<li>Rocketmq延迟消息底层是怎么设计的（提了延迟级别，修改topic为SCHEDULE_TOPIC_XXXX）</li>\n<li>那你说说ScheduleMessageService怎么拉延时消息的（忘了）</li>\n<li>mysql的查询能做哪些优化（说了索引、避免回表）然后喊停</li>\n<li>知道哪些中间件用到了raft算法（答了etcd，TiKV，rocketmq，kafka，nacos）</li>\n<li>算法刷得咋样了，会不会接雨水（人傻了）</li>\n<li>学校那些课咋办</li>\n<li>手里有不有其他offer，你愿意来上海吗？</li>\n</ol>\n<p><strong>场景题：</strong></p>\n<ol>\n<li>坐过高铁吧，有抢过票吗。你说说抢票会有哪些情况？（线程安全问题，加锁。比如同时读到共享变量，然后修改）</li>\n<li>那你说的是一种情况，读到的值是正确的，还有其他情况吗？（读的缓存，缓存没更新，mysql和redis数据不一致）</li>\n<li>那对于数据不一致我们一般怎么处理？</li>\n<li>现在我们来给12306抢票系统设计一个缓存，kv存什么？</li>\n</ol>\n<p>面试官一直在引导我，花了大概十多分钟。答得不是很好。<br><strong>反问+聊天：</strong></p>\n<ol>\n<li>今天的面试评价咋样</li>\n<li>部门是做什么的</li>\n<li>面试官您怎么看基架和业务（面试官对这个话题好像很感兴趣，聊了很久，吹水ing…）</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Oct 06 2023 15:42:19 GMT+0800 (中国标准时间)","title":"小红书企业效率部门后台实习生二面","path":"2023/09/09/小红书企业效率部门后台实习生二面/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-09T10:11:46.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-09T10:11:46.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["面经"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"哔哩哔哩-SRE后台实习生一面","date":"2023-09-09T11:42:06.000Z","_content":"\n> **第一次体验电话面，有点小紧张。师兄实习的部门，他mentor面的一面，准备不是特别充分，被狠狠拷打了。**\n\n**时间：2023/9/4 15:00**\n**时长：40min**\n**算法：电话面，无算法**\n**投递：boos直聘**\n**电话面40min，无手撕算法**\n\n1. 自我介绍\n2. 工作室做的什么项目，分为哪些模块\n3. CI、CD简单说说\n4. 操作系统熟悉吗\n5. Rocketmq 5.0 SDK 相比 4.x 做了哪些优化，什么区别\n6. 说说 Rocketmq 整合 Spring 的过程，为什么要重新整合一套出来\n7. 对比其他消息队列，不同mq分别用在什么场景\n8. 说说Raft算法\n9. 有了解其他一致性算法吗\n10. Leader选举过程\n11. Split-Vote怎么处理的\n12. 选举投票的条件\n13. 说说集合（吧啦吧啦，ArrayList，LinkedList，HashMap，HashTable，ConcurrenHashMap）\n14. 线程的状态\n15. 线程状态的转换（寄）\n16. Future获得结果怎么处理（没太懂问的啥）（寄）\n17. JUC工具类用过哪些\n18. Jvm实战过吗，说说命令（没调优过）\n19. Jstack可以查看哪些参数\n20. 自己写代码有遇到哪些问题（说了gitpod上用docker跑多个ubuntu容器，用jepsen框架检验raft一致性）\n21. 你们经常用Docker吗\n22. 镜像怎么管理的\n23. 实习的话，学校的课怎么办\n\n**反问：**\n\n1. 部门干什么的\n2. 面试评价：基础八股还不太熟，对开源项目还挺熟悉的。","source":"_posts/哔哩哔哩-SRE后台实习生一面.md","raw":"---\ntitle: 哔哩哔哩-SRE后台实习生一面\ndate: 2023-09-09 19:42:06\ntags: 面经\n---\n\n> **第一次体验电话面，有点小紧张。师兄实习的部门，他mentor面的一面，准备不是特别充分，被狠狠拷打了。**\n\n**时间：2023/9/4 15:00**\n**时长：40min**\n**算法：电话面，无算法**\n**投递：boos直聘**\n**电话面40min，无手撕算法**\n\n1. 自我介绍\n2. 工作室做的什么项目，分为哪些模块\n3. CI、CD简单说说\n4. 操作系统熟悉吗\n5. Rocketmq 5.0 SDK 相比 4.x 做了哪些优化，什么区别\n6. 说说 Rocketmq 整合 Spring 的过程，为什么要重新整合一套出来\n7. 对比其他消息队列，不同mq分别用在什么场景\n8. 说说Raft算法\n9. 有了解其他一致性算法吗\n10. Leader选举过程\n11. Split-Vote怎么处理的\n12. 选举投票的条件\n13. 说说集合（吧啦吧啦，ArrayList，LinkedList，HashMap，HashTable，ConcurrenHashMap）\n14. 线程的状态\n15. 线程状态的转换（寄）\n16. Future获得结果怎么处理（没太懂问的啥）（寄）\n17. JUC工具类用过哪些\n18. Jvm实战过吗，说说命令（没调优过）\n19. Jstack可以查看哪些参数\n20. 自己写代码有遇到哪些问题（说了gitpod上用docker跑多个ubuntu容器，用jepsen框架检验raft一致性）\n21. 你们经常用Docker吗\n22. 镜像怎么管理的\n23. 实习的话，学校的课怎么办\n\n**反问：**\n\n1. 部门干什么的\n2. 面试评价：基础八股还不太熟，对开源项目还挺熟悉的。","slug":"哔哩哔哩-SRE后台实习生一面","published":1,"updated":"2023-10-06T07:50:29.493Z","_id":"clmbymkoc0000p4un5vbo9wf7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><strong>第一次体验电话面，有点小紧张。师兄实习的部门，他mentor面的一面，准备不是特别充分，被狠狠拷打了。</strong></p>\n</blockquote>\n<p><strong>时间：2023&#x2F;9&#x2F;4 15:00</strong><br><strong>时长：40min</strong><br><strong>算法：电话面，无算法</strong><br><strong>投递：boos直聘</strong><br><strong>电话面40min，无手撕算法</strong></p>\n<ol>\n<li>自我介绍</li>\n<li>工作室做的什么项目，分为哪些模块</li>\n<li>CI、CD简单说说</li>\n<li>操作系统熟悉吗</li>\n<li>Rocketmq 5.0 SDK 相比 4.x 做了哪些优化，什么区别</li>\n<li>说说 Rocketmq 整合 Spring 的过程，为什么要重新整合一套出来</li>\n<li>对比其他消息队列，不同mq分别用在什么场景</li>\n<li>说说Raft算法</li>\n<li>有了解其他一致性算法吗</li>\n<li>Leader选举过程</li>\n<li>Split-Vote怎么处理的</li>\n<li>选举投票的条件</li>\n<li>说说集合（吧啦吧啦，ArrayList，LinkedList，HashMap，HashTable，ConcurrenHashMap）</li>\n<li>线程的状态</li>\n<li>线程状态的转换（寄）</li>\n<li>Future获得结果怎么处理（没太懂问的啥）（寄）</li>\n<li>JUC工具类用过哪些</li>\n<li>Jvm实战过吗，说说命令（没调优过）</li>\n<li>Jstack可以查看哪些参数</li>\n<li>自己写代码有遇到哪些问题（说了gitpod上用docker跑多个ubuntu容器，用jepsen框架检验raft一致性）</li>\n<li>你们经常用Docker吗</li>\n<li>镜像怎么管理的</li>\n<li>实习的话，学校的课怎么办</li>\n</ol>\n<p><strong>反问：</strong></p>\n<ol>\n<li>部门干什么的</li>\n<li>面试评价：基础八股还不太熟，对开源项目还挺熟悉的。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>第一次体验电话面，有点小紧张。师兄实习的部门，他mentor面的一面，准备不是特别充分，被狠狠拷打了。</strong></p>\n</blockquote>\n<p><strong>时间：2023&#x2F;9&#x2F;4 15:00</strong><br><strong>时长：40min</strong><br><strong>算法：电话面，无算法</strong><br><strong>投递：boos直聘</strong><br><strong>电话面40min，无手撕算法</strong></p>\n<ol>\n<li>自我介绍</li>\n<li>工作室做的什么项目，分为哪些模块</li>\n<li>CI、CD简单说说</li>\n<li>操作系统熟悉吗</li>\n<li>Rocketmq 5.0 SDK 相比 4.x 做了哪些优化，什么区别</li>\n<li>说说 Rocketmq 整合 Spring 的过程，为什么要重新整合一套出来</li>\n<li>对比其他消息队列，不同mq分别用在什么场景</li>\n<li>说说Raft算法</li>\n<li>有了解其他一致性算法吗</li>\n<li>Leader选举过程</li>\n<li>Split-Vote怎么处理的</li>\n<li>选举投票的条件</li>\n<li>说说集合（吧啦吧啦，ArrayList，LinkedList，HashMap，HashTable，ConcurrenHashMap）</li>\n<li>线程的状态</li>\n<li>线程状态的转换（寄）</li>\n<li>Future获得结果怎么处理（没太懂问的啥）（寄）</li>\n<li>JUC工具类用过哪些</li>\n<li>Jvm实战过吗，说说命令（没调优过）</li>\n<li>Jstack可以查看哪些参数</li>\n<li>自己写代码有遇到哪些问题（说了gitpod上用docker跑多个ubuntu容器，用jepsen框架检验raft一致性）</li>\n<li>你们经常用Docker吗</li>\n<li>镜像怎么管理的</li>\n<li>实习的话，学校的课怎么办</li>\n</ol>\n<p><strong>反问：</strong></p>\n<ol>\n<li>部门干什么的</li>\n<li>面试评价：基础八股还不太熟，对开源项目还挺熟悉的。</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Oct 06 2023 15:50:29 GMT+0800 (中国标准时间)","title":"哔哩哔哩-SRE后台实习生一面","path":"2023/09/09/哔哩哔哩-SRE后台实习生一面/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-09T11:42:06.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-09T11:42:06.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["面经"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JRaft-jepsen 线性一致性测试","date":"2023-09-11T05:47:03.000Z","_content":"\n**Jepsen前置资料参考：**[Jepsen中文官方文档](https://jaydenwen123.gitbook.io/zh_jepsen_doc/)   [Jepsen作者博客](https://aphyr.com/)\n**Cloujre前置资料：**[Clojure入门文章-英文版](https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome)   [Clojure中文文档](https://siddontang.gitbooks.io/lean-clojure/content/hello-clojure.html)\n\n# 线性一致性概述\n\n## 概念\n\n如果说你对线性一致性（Linearizability）概念不太熟，那一定知道强一致性（strong consistency），或者说原子一致性（atomic consistency），也可以理解为的 CAP 理论中的 C。\n\n## Raft线性一致性的实现\n\n### 线性一致性写\n\n所有的 read/write 都会来到 Leader，write 会有 Log 被序列化，依次顺序往后 commit，并 apply 然后在返回，那么一旦一个 write 被 committed，那么其前面的 write 的 Log 一定就被 committed 了。 所有的 write 都是有严格的顺序的，一旦被 committed 就可见了，所以 Raft 是线性一致性写。\n\n### 线性一致性读\n\n线性一致性读有很多种方法可以去实现，例如以下介绍了四种实现线性一致性读的办法：\n\n1. Raft Log read：每个 read 都有一个对应的 Log，和 write 一样，将非事务请求以事务请求的逻辑去进行处理。在 Read Log 被 Apply 的时候读，那么此时这个 read Log 之前的 write Log 也一定被 applied 了，那么读到的数据一定是最新的。\n2. ReadIndex：我们知道 Raft log read，会有 Raft read log 的复制和提交的开销，所以出现了 ReadIndex。当 read 请求发送给 Leader 的时候：**（1）首先需要确认 read 必须返回最新 committed 的结果**。但是一个节点刚当选 Leader 的时候并不知道最新的 committed index，这个时候需要提交一个 Noop Log Entry 来提交之前的 Log Entry，然后开始 Read；**（2）确认当前的 Leader 是不是还是 Leader**。可能由于网络分区，这个 Leader 已经被孤立了，所以 Leader 在返回 read 之前，先和 Replica-Group 的其他成员发送 heartbeat 确定自己 Leader 的身份；通过上述两条才可以保证读到的是最新刚被 committed 的数据。\n3. Lease read：主要是通过 lease 机制维护 Leader 的状态，来减少了 ReadIndex 每次 read 发送 heartheat 的开销。\n4. Follower read：先去 Leader 查询最新的 committed index，然后拿着 committed Index 去 Follower read，从而保证能从 Follower 中读到最新的数据，当前 Etcd 和 SOFA-Jraft 就实现了 Follower read。\n\n关于SOFA-JRaft实现线性一致性读可参考文章：[SOFAJRaft 线性一致读实现剖析](https://www.sofastack.tech/blog/sofa-jraft-linear-consistent-read-implementation/)\n\n# Jepsen 概述\n\nJepsen 是由 Kyle Kingsbury 采用函数式编程语言 Clojure 编写的验证分布式系统一致性的测试框架，作者使用它对许多著名的分布式系统（etcd, cockroachdb...）进行了“攻击”（一致性验证），并且帮助其中的部分系统找到了 bug。\n网上已有文章对其原理进行过简述，此处贴上链接即可：[当 TiDB 遇上 Jepsen](https://juejin.cn/post/6844903491442327566)\n\n# Jraft-Jepsen 部署验证一致性\n\n> 下面的内容是作者自己踩坑总结出来的部署流程，介绍了如何手动部署一套Jepsen框架对JRaft代码进行一致性验证。\n\n## 打开gitpod/linux\n\n运行ubuntu容器，其中1个control节点，5个jraft-test节点。\n\n```shell\ndocker run -itd --name ubuntu-1 --hostname control --privileged=true ubuntu\ndocker run -itd --name ubuntu-2 --hostname jraft1 --privileged=true ubuntu\ndocker run -itd --name ubuntu-3 --hostname jraft2 --privileged=true ubuntu\ndocker run -itd --name ubuntu-4 --hostname jraft3 --privileged=true ubuntu\ndocker run -itd --name ubuntu-5 --hostname jraft4 --privileged=true ubuntu\ndocker run -itd --name ubuntu-6 --hostname jraft5 --privileged=true ubuntu\n```\n\n查找所有容器的ip\n\n```shell\ndocker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)\n```\n\n进入容器\n\n```shell\ndocker exec -it ubuntu-1 bash\n```\n\n修改hosts文件，添加ip与域名的对应关系\n\n```shell\nvim /etc/hosts\n```\n\n此处根据查询出的容器ip对应填写即可\n\n```shell\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      control\n172.17.0.3      jraft1\n172.17.0.4      jraft2\n172.17.0.5      jraft3\n172.17.0.6      jraft4\n172.17.0.7      jraft5\n```\n\n## 设置Docker-SSH免密登录\n\n安装SSH服务\n\n```shell\napt-get update \napt-get install openssh-server //安装ssh服务\n```\n\n开启SSH服务\n\n```shell\n/etc/init.d/ssh start\nps -e | grep ssh  //检查是否开启ssh\n```\n\n### jraft-test节点\n\n在Test-Node的docker容器内，编辑文件/etc/ssh/sshd_config，添加一行PermitRootLogin yes表示ssh允许root登录。\n\n```shell\necho \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\n# 或者 vim /etc/ssh/sshd_config 并手敲一行PermitRootLogin yes\n```\n\n随后一定要重启ssh服务\n\n```shell\nservice ssh restart\n```\n\n设置root密码\n\n```shell\npasswd root\n```\n\n### control节点\n\n```shell\nssh-keygen //生成公钥私钥\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft1\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft2\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft3\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft4\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft5\n```\n\n私钥文件格式问题：您需要确保您的SSH私钥文件格式正确，并且Jepsen测试工具可以正确识别它。通常，SSH私钥文件格式为OpenSSH格式。您可以尝试使用以下命令将私钥文件转换为OpenSSH格式：\n\n```shell\nssh-keygen -p -f /root/.ssh/id_rsa -m pem -t rsa\n```\n\n## Ubuntu工具安装\n\ncontrol节点安装：\n\n```shell\napt-get update \napt-get install leiningen\napt-get install wget\napt-get install git\napt-get install vim\napt-get install sudo\napt-get install iptables\n```\n\ntest节点安装：\n\n```shell\napt-get update \napt-get install leiningen\napt-get install wget\napt-get install vim\napt-get install sudo\napt-get install iptables\n```\n\n**ubuntu容器安装jdk-8：**\n进入目录：\n\n```shell\nmkdir /usr/local/java && cd /usr/local/java\n```\n\nwget下载jdk8：\n\n```shell\nwget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz\"\n```\n\n解压：\n\n```shell\ntar -zxvf jdk-8u141-linux-x64.tar.gz -C /usr/local/java\n```\n\n编辑配置文件：此处需要注意，有可能在安装其他安装包时会自动安装jdk11，此处需要修改两个配置文件才能生效，并且修改为jdk8.\n\n```shell\nvim ~/.bashrc\n```\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_141\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n```shell\nvim /etc/profile\n```\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_141\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n执行命令使配置文件生效：\n\n```shell\nsource /etc/profile\n```\n\n## 安装clojure-control\n\n**此操作在control节点完成：**\n复制链接中的shell脚本：[https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control](https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control)\n\n```shell\ncd ~/bin\nvim control\n```\n\n将shell脚本粘贴到control中\n\n```shell\nchmod 777 control\n```\n\n设置control系统变量\n\n```shell\nexport CONTROL_ROOT=1\n```\n\n```shell\nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin\n```\n\n## 下载jraft测试代码\n\n**克隆远程仓库代码：**\n\n```shell\ngit clone jraft仓库（自测仓库/官方仓库）\n```\n\n**安装jar到本地仓库：**\n\n```shell\nmvn clean install -DskipTests=true\n```\n\n## 部署atomic-server\n\n**此操作在control节点执行：**\n\n```shell\ncontrol run jraft build\ncontrol run jraft deploy\n```\n\n## 开启测试\n\n**bash开启测试**\nconfiguration-test\n\n```shell\nbash run_test.sh --testfn configuration-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\nbridge-test\n\n```shell\nbash run_test.sh --testfn bridge-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\npause-test\n\n```shell\nbash run_test.sh --testfn pause-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\ncrash-test\n\n```shell\nbash run_test.sh --testfn crash-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\npartition-test\n\n```shell\nbash run_test.sh --testfn partition-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\npartition-majority-test\n\n```shell\nbash run_test.sh --testfn partition-majority-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\n**测试方法**\n\n```shell\nconfiguration-test\nbridge-test\npause-test\ncrash-test\npartition-test\npartition-majority-test\n```\n\n## 潜在问题及解决方案\n\n如果出现报错：\n\n```shell\nCould not find artifact apache-codec:commons-codec:jar:1.2 in central (https://repo1.maven.org/maven2/)\nCould not find artifact apache-codec:commons-codec:jar:1.2 in clojars (https://repo.clojars.org/)\nThis could be due to a typo in :dependencies, file system permissions, or network issues.\nIf you are behind a proxy, try setting the 'http_proxy' environment variable.\nUberjar aborting because jar failed: Could not resolve dependencies\n```\n\n解决办法：\n\n```shell\ncd ~/.m2/repository/apache-codec/commons-codec/1.2\n```\n\n可以看到里面是空的，此时拉取远程仓库jar包即可\n\n```shell\nwget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.pom\nwget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.jar\n```","source":"_posts/JRaft-jepsen-线性一致性测试.md","raw":"---\ntitle: JRaft-jepsen 线性一致性测试\ndate: 2023-09-11 13:47:03\ntags: SOFA-JRaft\n---\n\n**Jepsen前置资料参考：**[Jepsen中文官方文档](https://jaydenwen123.gitbook.io/zh_jepsen_doc/)   [Jepsen作者博客](https://aphyr.com/)\n**Cloujre前置资料：**[Clojure入门文章-英文版](https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome)   [Clojure中文文档](https://siddontang.gitbooks.io/lean-clojure/content/hello-clojure.html)\n\n# 线性一致性概述\n\n## 概念\n\n如果说你对线性一致性（Linearizability）概念不太熟，那一定知道强一致性（strong consistency），或者说原子一致性（atomic consistency），也可以理解为的 CAP 理论中的 C。\n\n## Raft线性一致性的实现\n\n### 线性一致性写\n\n所有的 read/write 都会来到 Leader，write 会有 Log 被序列化，依次顺序往后 commit，并 apply 然后在返回，那么一旦一个 write 被 committed，那么其前面的 write 的 Log 一定就被 committed 了。 所有的 write 都是有严格的顺序的，一旦被 committed 就可见了，所以 Raft 是线性一致性写。\n\n### 线性一致性读\n\n线性一致性读有很多种方法可以去实现，例如以下介绍了四种实现线性一致性读的办法：\n\n1. Raft Log read：每个 read 都有一个对应的 Log，和 write 一样，将非事务请求以事务请求的逻辑去进行处理。在 Read Log 被 Apply 的时候读，那么此时这个 read Log 之前的 write Log 也一定被 applied 了，那么读到的数据一定是最新的。\n2. ReadIndex：我们知道 Raft log read，会有 Raft read log 的复制和提交的开销，所以出现了 ReadIndex。当 read 请求发送给 Leader 的时候：**（1）首先需要确认 read 必须返回最新 committed 的结果**。但是一个节点刚当选 Leader 的时候并不知道最新的 committed index，这个时候需要提交一个 Noop Log Entry 来提交之前的 Log Entry，然后开始 Read；**（2）确认当前的 Leader 是不是还是 Leader**。可能由于网络分区，这个 Leader 已经被孤立了，所以 Leader 在返回 read 之前，先和 Replica-Group 的其他成员发送 heartbeat 确定自己 Leader 的身份；通过上述两条才可以保证读到的是最新刚被 committed 的数据。\n3. Lease read：主要是通过 lease 机制维护 Leader 的状态，来减少了 ReadIndex 每次 read 发送 heartheat 的开销。\n4. Follower read：先去 Leader 查询最新的 committed index，然后拿着 committed Index 去 Follower read，从而保证能从 Follower 中读到最新的数据，当前 Etcd 和 SOFA-Jraft 就实现了 Follower read。\n\n关于SOFA-JRaft实现线性一致性读可参考文章：[SOFAJRaft 线性一致读实现剖析](https://www.sofastack.tech/blog/sofa-jraft-linear-consistent-read-implementation/)\n\n# Jepsen 概述\n\nJepsen 是由 Kyle Kingsbury 采用函数式编程语言 Clojure 编写的验证分布式系统一致性的测试框架，作者使用它对许多著名的分布式系统（etcd, cockroachdb...）进行了“攻击”（一致性验证），并且帮助其中的部分系统找到了 bug。\n网上已有文章对其原理进行过简述，此处贴上链接即可：[当 TiDB 遇上 Jepsen](https://juejin.cn/post/6844903491442327566)\n\n# Jraft-Jepsen 部署验证一致性\n\n> 下面的内容是作者自己踩坑总结出来的部署流程，介绍了如何手动部署一套Jepsen框架对JRaft代码进行一致性验证。\n\n## 打开gitpod/linux\n\n运行ubuntu容器，其中1个control节点，5个jraft-test节点。\n\n```shell\ndocker run -itd --name ubuntu-1 --hostname control --privileged=true ubuntu\ndocker run -itd --name ubuntu-2 --hostname jraft1 --privileged=true ubuntu\ndocker run -itd --name ubuntu-3 --hostname jraft2 --privileged=true ubuntu\ndocker run -itd --name ubuntu-4 --hostname jraft3 --privileged=true ubuntu\ndocker run -itd --name ubuntu-5 --hostname jraft4 --privileged=true ubuntu\ndocker run -itd --name ubuntu-6 --hostname jraft5 --privileged=true ubuntu\n```\n\n查找所有容器的ip\n\n```shell\ndocker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)\n```\n\n进入容器\n\n```shell\ndocker exec -it ubuntu-1 bash\n```\n\n修改hosts文件，添加ip与域名的对应关系\n\n```shell\nvim /etc/hosts\n```\n\n此处根据查询出的容器ip对应填写即可\n\n```shell\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      control\n172.17.0.3      jraft1\n172.17.0.4      jraft2\n172.17.0.5      jraft3\n172.17.0.6      jraft4\n172.17.0.7      jraft5\n```\n\n## 设置Docker-SSH免密登录\n\n安装SSH服务\n\n```shell\napt-get update \napt-get install openssh-server //安装ssh服务\n```\n\n开启SSH服务\n\n```shell\n/etc/init.d/ssh start\nps -e | grep ssh  //检查是否开启ssh\n```\n\n### jraft-test节点\n\n在Test-Node的docker容器内，编辑文件/etc/ssh/sshd_config，添加一行PermitRootLogin yes表示ssh允许root登录。\n\n```shell\necho \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\n# 或者 vim /etc/ssh/sshd_config 并手敲一行PermitRootLogin yes\n```\n\n随后一定要重启ssh服务\n\n```shell\nservice ssh restart\n```\n\n设置root密码\n\n```shell\npasswd root\n```\n\n### control节点\n\n```shell\nssh-keygen //生成公钥私钥\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft1\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft2\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft3\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft4\nssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft5\n```\n\n私钥文件格式问题：您需要确保您的SSH私钥文件格式正确，并且Jepsen测试工具可以正确识别它。通常，SSH私钥文件格式为OpenSSH格式。您可以尝试使用以下命令将私钥文件转换为OpenSSH格式：\n\n```shell\nssh-keygen -p -f /root/.ssh/id_rsa -m pem -t rsa\n```\n\n## Ubuntu工具安装\n\ncontrol节点安装：\n\n```shell\napt-get update \napt-get install leiningen\napt-get install wget\napt-get install git\napt-get install vim\napt-get install sudo\napt-get install iptables\n```\n\ntest节点安装：\n\n```shell\napt-get update \napt-get install leiningen\napt-get install wget\napt-get install vim\napt-get install sudo\napt-get install iptables\n```\n\n**ubuntu容器安装jdk-8：**\n进入目录：\n\n```shell\nmkdir /usr/local/java && cd /usr/local/java\n```\n\nwget下载jdk8：\n\n```shell\nwget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz\"\n```\n\n解压：\n\n```shell\ntar -zxvf jdk-8u141-linux-x64.tar.gz -C /usr/local/java\n```\n\n编辑配置文件：此处需要注意，有可能在安装其他安装包时会自动安装jdk11，此处需要修改两个配置文件才能生效，并且修改为jdk8.\n\n```shell\nvim ~/.bashrc\n```\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_141\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n```shell\nvim /etc/profile\n```\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_141\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n执行命令使配置文件生效：\n\n```shell\nsource /etc/profile\n```\n\n## 安装clojure-control\n\n**此操作在control节点完成：**\n复制链接中的shell脚本：[https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control](https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control)\n\n```shell\ncd ~/bin\nvim control\n```\n\n将shell脚本粘贴到control中\n\n```shell\nchmod 777 control\n```\n\n设置control系统变量\n\n```shell\nexport CONTROL_ROOT=1\n```\n\n```shell\nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin\n```\n\n## 下载jraft测试代码\n\n**克隆远程仓库代码：**\n\n```shell\ngit clone jraft仓库（自测仓库/官方仓库）\n```\n\n**安装jar到本地仓库：**\n\n```shell\nmvn clean install -DskipTests=true\n```\n\n## 部署atomic-server\n\n**此操作在control节点执行：**\n\n```shell\ncontrol run jraft build\ncontrol run jraft deploy\n```\n\n## 开启测试\n\n**bash开启测试**\nconfiguration-test\n\n```shell\nbash run_test.sh --testfn configuration-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\nbridge-test\n\n```shell\nbash run_test.sh --testfn bridge-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\npause-test\n\n```shell\nbash run_test.sh --testfn pause-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\ncrash-test\n\n```shell\nbash run_test.sh --testfn crash-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\npartition-test\n\n```shell\nbash run_test.sh --testfn partition-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\npartition-majority-test\n\n```shell\nbash run_test.sh --testfn partition-majority-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa\n```\n\n**测试方法**\n\n```shell\nconfiguration-test\nbridge-test\npause-test\ncrash-test\npartition-test\npartition-majority-test\n```\n\n## 潜在问题及解决方案\n\n如果出现报错：\n\n```shell\nCould not find artifact apache-codec:commons-codec:jar:1.2 in central (https://repo1.maven.org/maven2/)\nCould not find artifact apache-codec:commons-codec:jar:1.2 in clojars (https://repo.clojars.org/)\nThis could be due to a typo in :dependencies, file system permissions, or network issues.\nIf you are behind a proxy, try setting the 'http_proxy' environment variable.\nUberjar aborting because jar failed: Could not resolve dependencies\n```\n\n解决办法：\n\n```shell\ncd ~/.m2/repository/apache-codec/commons-codec/1.2\n```\n\n可以看到里面是空的，此时拉取远程仓库jar包即可\n\n```shell\nwget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.pom\nwget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.jar\n```","slug":"JRaft-jepsen-线性一致性测试","published":1,"updated":"2023-09-11T06:25:23.848Z","_id":"clmehe4cn0000v0uncc9a7brm","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Jepsen前置资料参考：</strong><a class=\"link\"   href=\"https://jaydenwen123.gitbook.io/zh_jepsen_doc/\" >Jepsen中文官方文档<i class=\"fas fa-external-link-alt\"></i></a>   <a class=\"link\"   href=\"https://aphyr.com/\" >Jepsen作者博客<i class=\"fas fa-external-link-alt\"></i></a><br><strong>Cloujre前置资料：</strong><a class=\"link\"   href=\"https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome\" >Clojure入门文章-英文版<i class=\"fas fa-external-link-alt\"></i></a>   <a class=\"link\"   href=\"https://siddontang.gitbooks.io/lean-clojure/content/hello-clojure.html\" >Clojure中文文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"线性一致性概述\"><a href=\"#线性一致性概述\" class=\"headerlink\" title=\"线性一致性概述\"></a>线性一致性概述</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>如果说你对线性一致性（Linearizability）概念不太熟，那一定知道强一致性（strong consistency），或者说原子一致性（atomic consistency），也可以理解为的 CAP 理论中的 C。</p>\n<h2 id=\"Raft线性一致性的实现\"><a href=\"#Raft线性一致性的实现\" class=\"headerlink\" title=\"Raft线性一致性的实现\"></a>Raft线性一致性的实现</h2><h3 id=\"线性一致性写\"><a href=\"#线性一致性写\" class=\"headerlink\" title=\"线性一致性写\"></a>线性一致性写</h3><p>所有的 read&#x2F;write 都会来到 Leader，write 会有 Log 被序列化，依次顺序往后 commit，并 apply 然后在返回，那么一旦一个 write 被 committed，那么其前面的 write 的 Log 一定就被 committed 了。 所有的 write 都是有严格的顺序的，一旦被 committed 就可见了，所以 Raft 是线性一致性写。</p>\n<h3 id=\"线性一致性读\"><a href=\"#线性一致性读\" class=\"headerlink\" title=\"线性一致性读\"></a>线性一致性读</h3><p>线性一致性读有很多种方法可以去实现，例如以下介绍了四种实现线性一致性读的办法：</p>\n<ol>\n<li>Raft Log read：每个 read 都有一个对应的 Log，和 write 一样，将非事务请求以事务请求的逻辑去进行处理。在 Read Log 被 Apply 的时候读，那么此时这个 read Log 之前的 write Log 也一定被 applied 了，那么读到的数据一定是最新的。</li>\n<li>ReadIndex：我们知道 Raft log read，会有 Raft read log 的复制和提交的开销，所以出现了 ReadIndex。当 read 请求发送给 Leader 的时候：<strong>（1）首先需要确认 read 必须返回最新 committed 的结果</strong>。但是一个节点刚当选 Leader 的时候并不知道最新的 committed index，这个时候需要提交一个 Noop Log Entry 来提交之前的 Log Entry，然后开始 Read；<strong>（2）确认当前的 Leader 是不是还是 Leader</strong>。可能由于网络分区，这个 Leader 已经被孤立了，所以 Leader 在返回 read 之前，先和 Replica-Group 的其他成员发送 heartbeat 确定自己 Leader 的身份；通过上述两条才可以保证读到的是最新刚被 committed 的数据。</li>\n<li>Lease read：主要是通过 lease 机制维护 Leader 的状态，来减少了 ReadIndex 每次 read 发送 heartheat 的开销。</li>\n<li>Follower read：先去 Leader 查询最新的 committed index，然后拿着 committed Index 去 Follower read，从而保证能从 Follower 中读到最新的数据，当前 Etcd 和 SOFA-Jraft 就实现了 Follower read。</li>\n</ol>\n<p>关于SOFA-JRaft实现线性一致性读可参考文章：<a class=\"link\"   href=\"https://www.sofastack.tech/blog/sofa-jraft-linear-consistent-read-implementation/\" >SOFAJRaft 线性一致读实现剖析<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"Jepsen-概述\"><a href=\"#Jepsen-概述\" class=\"headerlink\" title=\"Jepsen 概述\"></a>Jepsen 概述</h1><p>Jepsen 是由 Kyle Kingsbury 采用函数式编程语言 Clojure 编写的验证分布式系统一致性的测试框架，作者使用它对许多著名的分布式系统（etcd, cockroachdb…）进行了“攻击”（一致性验证），并且帮助其中的部分系统找到了 bug。<br>网上已有文章对其原理进行过简述，此处贴上链接即可：<a class=\"link\"   href=\"https://juejin.cn/post/6844903491442327566\" >当 TiDB 遇上 Jepsen<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"Jraft-Jepsen-部署验证一致性\"><a href=\"#Jraft-Jepsen-部署验证一致性\" class=\"headerlink\" title=\"Jraft-Jepsen 部署验证一致性\"></a>Jraft-Jepsen 部署验证一致性</h1><blockquote>\n<p>下面的内容是作者自己踩坑总结出来的部署流程，介绍了如何手动部署一套Jepsen框架对JRaft代码进行一致性验证。</p>\n</blockquote>\n<h2 id=\"打开gitpod-linux\"><a href=\"#打开gitpod-linux\" class=\"headerlink\" title=\"打开gitpod&#x2F;linux\"></a>打开gitpod&#x2F;linux</h2><p>运行ubuntu容器，其中1个control节点，5个jraft-test节点。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name ubuntu-1 --hostname control --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-2 --hostname jraft1 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-3 --hostname jraft2 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-4 --hostname jraft3 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-5 --hostname jraft4 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-6 --hostname jraft5 --privileged=true ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>查找所有容器的ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format=&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it ubuntu-1 bash</span><br></pre></td></tr></table></figure>\n\n<p>修改hosts文件，添加ip与域名的对应关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p>此处根据查询出的容器ip对应填写即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      control</span><br><span class=\"line\">172.17.0.3      jraft1</span><br><span class=\"line\">172.17.0.4      jraft2</span><br><span class=\"line\">172.17.0.5      jraft3</span><br><span class=\"line\">172.17.0.6      jraft4</span><br><span class=\"line\">172.17.0.7      jraft5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置Docker-SSH免密登录\"><a href=\"#设置Docker-SSH免密登录\" class=\"headerlink\" title=\"设置Docker-SSH免密登录\"></a>设置Docker-SSH免密登录</h2><p>安装SSH服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install openssh-server //安装ssh服务</span><br></pre></td></tr></table></figure>\n\n<p>开启SSH服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/ssh start</span><br><span class=\"line\">ps -e | grep ssh  //检查是否开启ssh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jraft-test节点\"><a href=\"#jraft-test节点\" class=\"headerlink\" title=\"jraft-test节点\"></a>jraft-test节点</h3><p>在Test-Node的docker容器内，编辑文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config，添加一行PermitRootLogin yes表示ssh允许root登录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;PermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者 vim /etc/ssh/sshd_config 并手敲一行PermitRootLogin <span class=\"built_in\">yes</span></span></span><br></pre></td></tr></table></figure>\n\n<p>随后一定要重启ssh服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>设置root密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd root</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"control节点\"><a href=\"#control节点\" class=\"headerlink\" title=\"control节点\"></a>control节点</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen //生成公钥私钥</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft1</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft2</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft3</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft4</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft5</span><br></pre></td></tr></table></figure>\n\n<p>私钥文件格式问题：您需要确保您的SSH私钥文件格式正确，并且Jepsen测试工具可以正确识别它。通常，SSH私钥文件格式为OpenSSH格式。您可以尝试使用以下命令将私钥文件转换为OpenSSH格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -p -f /root/.ssh/id_rsa -m pem -t rsa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu工具安装\"><a href=\"#Ubuntu工具安装\" class=\"headerlink\" title=\"Ubuntu工具安装\"></a>Ubuntu工具安装</h2><p>control节点安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install leiningen</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">apt-get install git</span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\">apt-get install sudo</span><br><span class=\"line\">apt-get install iptables</span><br></pre></td></tr></table></figure>\n\n<p>test节点安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install leiningen</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\">apt-get install sudo</span><br><span class=\"line\">apt-get install iptables</span><br></pre></td></tr></table></figure>\n\n<p><strong>ubuntu容器安装jdk-8：</strong><br>进入目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/java &amp;&amp; cd /usr/local/java</span><br></pre></td></tr></table></figure>\n\n<p>wget下载jdk8：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</span><br></pre></td></tr></table></figure>\n\n<p>解压：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u141-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件：此处需要注意，有可能在安装其他安装包时会自动安装jdk11，此处需要修改两个配置文件才能生效，并且修改为jdk8.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_141</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_141</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>执行命令使配置文件生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装clojure-control\"><a href=\"#安装clojure-control\" class=\"headerlink\" title=\"安装clojure-control\"></a>安装clojure-control</h2><p><strong>此操作在control节点完成：</strong><br>复制链接中的shell脚本：<a class=\"link\"   href=\"https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control\" >https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/bin</span><br><span class=\"line\">vim control</span><br></pre></td></tr></table></figure>\n\n<p>将shell脚本粘贴到control中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 control</span><br></pre></td></tr></table></figure>\n\n<p>设置control系统变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CONTROL_ROOT=1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载jraft测试代码\"><a href=\"#下载jraft测试代码\" class=\"headerlink\" title=\"下载jraft测试代码\"></a>下载jraft测试代码</h2><p><strong>克隆远程仓库代码：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone jraft仓库（自测仓库/官方仓库）</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装jar到本地仓库：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install -DskipTests=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署atomic-server\"><a href=\"#部署atomic-server\" class=\"headerlink\" title=\"部署atomic-server\"></a>部署atomic-server</h2><p><strong>此操作在control节点执行：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">control run jraft build</span><br><span class=\"line\">control run jraft deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启测试\"><a href=\"#开启测试\" class=\"headerlink\" title=\"开启测试\"></a>开启测试</h2><p><strong>bash开启测试</strong><br>configuration-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn configuration-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>bridge-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn bridge-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>pause-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn pause-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>crash-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn crash-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>partition-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn partition-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>partition-majority-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn partition-majority-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试方法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configuration-test</span><br><span class=\"line\">bridge-test</span><br><span class=\"line\">pause-test</span><br><span class=\"line\">crash-test</span><br><span class=\"line\">partition-test</span><br><span class=\"line\">partition-majority-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"潜在问题及解决方案\"><a href=\"#潜在问题及解决方案\" class=\"headerlink\" title=\"潜在问题及解决方案\"></a>潜在问题及解决方案</h2><p>如果出现报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not find artifact apache-codec:commons-codec:jar:1.2 in central (https://repo1.maven.org/maven2/)</span><br><span class=\"line\">Could not find artifact apache-codec:commons-codec:jar:1.2 in clojars (https://repo.clojars.org/)</span><br><span class=\"line\">This could be due to a typo in :dependencies, file system permissions, or network issues.</span><br><span class=\"line\">If you are behind a proxy, try setting the &#x27;http_proxy&#x27; environment variable.</span><br><span class=\"line\">Uberjar aborting because jar failed: Could not resolve dependencies</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.m2/repository/apache-codec/commons-codec/1.2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到里面是空的，此时拉取远程仓库jar包即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.pom</span><br><span class=\"line\">wget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.jar</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>Jepsen前置资料参考：</strong><a href=\"https://jaydenwen123.gitbook.io/zh_jepsen_doc/\">Jepsen中文官方文档</a>   <a href=\"https://aphyr.com/\">Jepsen作者博客</a><br><strong>Cloujre前置资料：</strong><a href=\"https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome\">Clojure入门文章-英文版</a>   <a href=\"https://siddontang.gitbooks.io/lean-clojure/content/hello-clojure.html\">Clojure中文文档</a></p>\n<h1 id=\"线性一致性概述\"><a href=\"#线性一致性概述\" class=\"headerlink\" title=\"线性一致性概述\"></a>线性一致性概述</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>如果说你对线性一致性（Linearizability）概念不太熟，那一定知道强一致性（strong consistency），或者说原子一致性（atomic consistency），也可以理解为的 CAP 理论中的 C。</p>\n<h2 id=\"Raft线性一致性的实现\"><a href=\"#Raft线性一致性的实现\" class=\"headerlink\" title=\"Raft线性一致性的实现\"></a>Raft线性一致性的实现</h2><h3 id=\"线性一致性写\"><a href=\"#线性一致性写\" class=\"headerlink\" title=\"线性一致性写\"></a>线性一致性写</h3><p>所有的 read&#x2F;write 都会来到 Leader，write 会有 Log 被序列化，依次顺序往后 commit，并 apply 然后在返回，那么一旦一个 write 被 committed，那么其前面的 write 的 Log 一定就被 committed 了。 所有的 write 都是有严格的顺序的，一旦被 committed 就可见了，所以 Raft 是线性一致性写。</p>\n<h3 id=\"线性一致性读\"><a href=\"#线性一致性读\" class=\"headerlink\" title=\"线性一致性读\"></a>线性一致性读</h3><p>线性一致性读有很多种方法可以去实现，例如以下介绍了四种实现线性一致性读的办法：</p>\n<ol>\n<li>Raft Log read：每个 read 都有一个对应的 Log，和 write 一样，将非事务请求以事务请求的逻辑去进行处理。在 Read Log 被 Apply 的时候读，那么此时这个 read Log 之前的 write Log 也一定被 applied 了，那么读到的数据一定是最新的。</li>\n<li>ReadIndex：我们知道 Raft log read，会有 Raft read log 的复制和提交的开销，所以出现了 ReadIndex。当 read 请求发送给 Leader 的时候：<strong>（1）首先需要确认 read 必须返回最新 committed 的结果</strong>。但是一个节点刚当选 Leader 的时候并不知道最新的 committed index，这个时候需要提交一个 Noop Log Entry 来提交之前的 Log Entry，然后开始 Read；<strong>（2）确认当前的 Leader 是不是还是 Leader</strong>。可能由于网络分区，这个 Leader 已经被孤立了，所以 Leader 在返回 read 之前，先和 Replica-Group 的其他成员发送 heartbeat 确定自己 Leader 的身份；通过上述两条才可以保证读到的是最新刚被 committed 的数据。</li>\n<li>Lease read：主要是通过 lease 机制维护 Leader 的状态，来减少了 ReadIndex 每次 read 发送 heartheat 的开销。</li>\n<li>Follower read：先去 Leader 查询最新的 committed index，然后拿着 committed Index 去 Follower read，从而保证能从 Follower 中读到最新的数据，当前 Etcd 和 SOFA-Jraft 就实现了 Follower read。</li>\n</ol>\n<p>关于SOFA-JRaft实现线性一致性读可参考文章：<a href=\"https://www.sofastack.tech/blog/sofa-jraft-linear-consistent-read-implementation/\">SOFAJRaft 线性一致读实现剖析</a></p>\n<h1 id=\"Jepsen-概述\"><a href=\"#Jepsen-概述\" class=\"headerlink\" title=\"Jepsen 概述\"></a>Jepsen 概述</h1><p>Jepsen 是由 Kyle Kingsbury 采用函数式编程语言 Clojure 编写的验证分布式系统一致性的测试框架，作者使用它对许多著名的分布式系统（etcd, cockroachdb…）进行了“攻击”（一致性验证），并且帮助其中的部分系统找到了 bug。<br>网上已有文章对其原理进行过简述，此处贴上链接即可：<a href=\"https://juejin.cn/post/6844903491442327566\">当 TiDB 遇上 Jepsen</a></p>\n<h1 id=\"Jraft-Jepsen-部署验证一致性\"><a href=\"#Jraft-Jepsen-部署验证一致性\" class=\"headerlink\" title=\"Jraft-Jepsen 部署验证一致性\"></a>Jraft-Jepsen 部署验证一致性</h1><blockquote>\n<p>下面的内容是作者自己踩坑总结出来的部署流程，介绍了如何手动部署一套Jepsen框架对JRaft代码进行一致性验证。</p>\n</blockquote>\n<h2 id=\"打开gitpod-linux\"><a href=\"#打开gitpod-linux\" class=\"headerlink\" title=\"打开gitpod&#x2F;linux\"></a>打开gitpod&#x2F;linux</h2><p>运行ubuntu容器，其中1个control节点，5个jraft-test节点。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name ubuntu-1 --hostname control --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-2 --hostname jraft1 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-3 --hostname jraft2 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-4 --hostname jraft3 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-5 --hostname jraft4 --privileged=true ubuntu</span><br><span class=\"line\">docker run -itd --name ubuntu-6 --hostname jraft5 --privileged=true ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>查找所有容器的ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format=&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it ubuntu-1 bash</span><br></pre></td></tr></table></figure>\n\n<p>修改hosts文件，添加ip与域名的对应关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p>此处根据查询出的容器ip对应填写即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      control</span><br><span class=\"line\">172.17.0.3      jraft1</span><br><span class=\"line\">172.17.0.4      jraft2</span><br><span class=\"line\">172.17.0.5      jraft3</span><br><span class=\"line\">172.17.0.6      jraft4</span><br><span class=\"line\">172.17.0.7      jraft5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置Docker-SSH免密登录\"><a href=\"#设置Docker-SSH免密登录\" class=\"headerlink\" title=\"设置Docker-SSH免密登录\"></a>设置Docker-SSH免密登录</h2><p>安装SSH服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install openssh-server //安装ssh服务</span><br></pre></td></tr></table></figure>\n\n<p>开启SSH服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/ssh start</span><br><span class=\"line\">ps -e | grep ssh  //检查是否开启ssh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jraft-test节点\"><a href=\"#jraft-test节点\" class=\"headerlink\" title=\"jraft-test节点\"></a>jraft-test节点</h3><p>在Test-Node的docker容器内，编辑文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config，添加一行PermitRootLogin yes表示ssh允许root登录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;PermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者 vim /etc/ssh/sshd_config 并手敲一行PermitRootLogin <span class=\"built_in\">yes</span></span></span><br></pre></td></tr></table></figure>\n\n<p>随后一定要重启ssh服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>设置root密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd root</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"control节点\"><a href=\"#control节点\" class=\"headerlink\" title=\"control节点\"></a>control节点</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen //生成公钥私钥</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft1</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft2</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft3</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft4</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub root@jraft5</span><br></pre></td></tr></table></figure>\n\n<p>私钥文件格式问题：您需要确保您的SSH私钥文件格式正确，并且Jepsen测试工具可以正确识别它。通常，SSH私钥文件格式为OpenSSH格式。您可以尝试使用以下命令将私钥文件转换为OpenSSH格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -p -f /root/.ssh/id_rsa -m pem -t rsa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu工具安装\"><a href=\"#Ubuntu工具安装\" class=\"headerlink\" title=\"Ubuntu工具安装\"></a>Ubuntu工具安装</h2><p>control节点安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install leiningen</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">apt-get install git</span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\">apt-get install sudo</span><br><span class=\"line\">apt-get install iptables</span><br></pre></td></tr></table></figure>\n\n<p>test节点安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install leiningen</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\">apt-get install sudo</span><br><span class=\"line\">apt-get install iptables</span><br></pre></td></tr></table></figure>\n\n<p><strong>ubuntu容器安装jdk-8：</strong><br>进入目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/java &amp;&amp; cd /usr/local/java</span><br></pre></td></tr></table></figure>\n\n<p>wget下载jdk8：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</span><br></pre></td></tr></table></figure>\n\n<p>解压：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u141-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件：此处需要注意，有可能在安装其他安装包时会自动安装jdk11，此处需要修改两个配置文件才能生效，并且修改为jdk8.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_141</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_141</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>执行命令使配置文件生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装clojure-control\"><a href=\"#安装clojure-control\" class=\"headerlink\" title=\"安装clojure-control\"></a>安装clojure-control</h2><p><strong>此操作在control节点完成：</strong><br>复制链接中的shell脚本：<a href=\"https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control\">https://raw.githubusercontent.com/killme2008/clojure-control/master/bin/control</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/bin</span><br><span class=\"line\">vim control</span><br></pre></td></tr></table></figure>\n\n<p>将shell脚本粘贴到control中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 control</span><br></pre></td></tr></table></figure>\n\n<p>设置control系统变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CONTROL_ROOT=1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载jraft测试代码\"><a href=\"#下载jraft测试代码\" class=\"headerlink\" title=\"下载jraft测试代码\"></a>下载jraft测试代码</h2><p><strong>克隆远程仓库代码：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone jraft仓库（自测仓库/官方仓库）</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装jar到本地仓库：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install -DskipTests=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署atomic-server\"><a href=\"#部署atomic-server\" class=\"headerlink\" title=\"部署atomic-server\"></a>部署atomic-server</h2><p><strong>此操作在control节点执行：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">control run jraft build</span><br><span class=\"line\">control run jraft deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启测试\"><a href=\"#开启测试\" class=\"headerlink\" title=\"开启测试\"></a>开启测试</h2><p><strong>bash开启测试</strong><br>configuration-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn configuration-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>bridge-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn bridge-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>pause-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn pause-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>crash-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn crash-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>partition-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn partition-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>partition-majority-test</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash run_test.sh --testfn partition-majority-test --username root --password 123 --ssh-private-key /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试方法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configuration-test</span><br><span class=\"line\">bridge-test</span><br><span class=\"line\">pause-test</span><br><span class=\"line\">crash-test</span><br><span class=\"line\">partition-test</span><br><span class=\"line\">partition-majority-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"潜在问题及解决方案\"><a href=\"#潜在问题及解决方案\" class=\"headerlink\" title=\"潜在问题及解决方案\"></a>潜在问题及解决方案</h2><p>如果出现报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not find artifact apache-codec:commons-codec:jar:1.2 in central (https://repo1.maven.org/maven2/)</span><br><span class=\"line\">Could not find artifact apache-codec:commons-codec:jar:1.2 in clojars (https://repo.clojars.org/)</span><br><span class=\"line\">This could be due to a typo in :dependencies, file system permissions, or network issues.</span><br><span class=\"line\">If you are behind a proxy, try setting the &#x27;http_proxy&#x27; environment variable.</span><br><span class=\"line\">Uberjar aborting because jar failed: Could not resolve dependencies</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.m2/repository/apache-codec/commons-codec/1.2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到里面是空的，此时拉取远程仓库jar包即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.pom</span><br><span class=\"line\">wget https://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.jar</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Sep 11 2023 14:25:23 GMT+0800 (中国标准时间)","title":"JRaft-jepsen 线性一致性测试","path":"2023/09/11/JRaft-jepsen-线性一致性测试/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-11T05:47:03.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-11T05:47:03.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["SOFA-JRaft"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"双亲委派模型应用及其规则的打破","date":"2023-09-11T12:38:43.000Z","_content":"> 本文整合《深入理解JAVA虚拟机》及自己的理解，若有错误敬请留言斧正。\n\n\n# 双亲委派模型\n\n## 双亲委派模型加载流程\n\n**向上委派：** 当一个类被加载时，默认会调用**Application ClassLoader**，但AppClassLoader并不会直接加载该类，而是通过parent变量找到其父类加载器(**Extension ClassLoader**)，委托给其父类进行加载，ExtClassLoader会委托给**Bootstrap ClassLoader**，Bootstrap CLassLoader没有父类了。\n**向下委派：**此时Bootstrap CLassLoader会对需要加载类尝试进行加载，如果无法加载则返回ExtClassLoader进行加载。同理，如果ExtClassLoader无法加载则返回AppClassLoader进行加载，如果AppClassLoader也无法加载则抛出ClassNotFoundException异常。上述过程有一个类加载器可以完成相关加载任务，则加载成功，存放其元数据并创建Class对象(JDK8之后Class对象是在堆区)。\n\n## 类加载器各自负责加载的类\n\n**Bootstrap CLassLoader：**负责加载你配置的环境变量JAVA_HOME/lib下的核心类库。\n**Extension ClassLoader：**负责加载JAVA_HOME/lib/ext下的扩展类库。\n**Application ClassLoader：**负责加载CLASSPATH下指定的类库。\n\n## 类加载流程代码实现\n\n```java\n    protected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // 首先，查找该类是否已经被加载过\n            Class<?> c = findLoadedClass(name);\n            // 未被加载\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    // 有父加载器，就让父加载器去加载\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    // 没有父加载器，则让BootStrap加载器去加载\n                    // 因为BootStrap类加载器没有父类加载器的\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // 父类无法加载，则自己调用 findClass 方法去加载\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n\n**总结loadClass的代码逻辑：**\n\n1. 先检查请求加载的类型是否已经被加载过\n2. 若没有则调用父加载器的loadClass()方法\n3. 若父加载器为空则默认使用启动类加载器作为父加载器。\n4. 假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。\n\n## 双亲委派模型的好处\n\n1. **防止加载同一个.class。** 通过委托去询问上级是否已经加载过该.class，如果加载过了，则不需要重新加载。保证了数据安全。\n2. **保证核心.class不被篡改。** 通过委托的方式，保证核心.class不被篡改，即使被篡改也不会被加载，即使被加载也不会是同一个class对象，因为不同的加载器加载同一个.class也不是同一个Class对象。这样则保证了Class的执行安全。\n\n# 打破双亲委派模型\n\n## 为什么需要打破双亲委派模型\n\n由于加载范围的限制带来的一些不灵活问题，导致此时需要破坏双亲委派模型。\n\n## 打破双亲委派的经典示例\n\n### Tomcat\n\nTomcat打破了双亲委派模型，具体解释这篇文章讲得很好，此处不赘述了：[Tomcat是如何打破\"双亲委派\"机制的?](https://developer.aliyun.com/article/1081332)\n![tomcat.png](https://s2.loli.net/2023/10/06/Kvoc4DY1xOV6efN.png)\n\n那么为什么我们认为 Tomcat 打破了双亲委派模型呢？\n因为 Web 应用默认的类加载顺序是（打破了双亲委派规则）：\n\n1. 先在本地缓存中查找该类是否已经加载过，如果加载过就返回缓存中的。\n2. 如果没有加载过，委托给AppClassLoader是否加载过，如果加载过就返回。\n3. 如果AppClassLoader也没加载过，委托给ExtClassLoader去加载，这么做的目的就是：防止应用自己的类库覆盖了核心类库，因为WebAppClassLoader需要打破双亲委托机制，假如应用里自定义了一个叫java.lang.String的类，如果先加载这个类，就会覆盖核心类库的java.lang.String，所以说它会优先尝试用ExtClassLoader去加载，因为ExtClassLoader加载不到同样也会委托给BootstrapClassLoader去加载，也就避免了覆盖了核心类库的问题。\n4. 如果ExtClassLoader也没有查找到，说明核心类库中没有这个类，那么就在本地应用目录下查找此类并加载。\n5. 如果本地应用目录下还有没有这个类，那么肯定不是应用自己定义的类，那么就由AppClassLoader去加载。这里是通过Class.forName()调用AppClassLoader类加载器的，因为Class.forName()的默认加载器就是AppClassLoader。\n6. 如果上述都没有找到，那么只能抛出ClassNotFoundException了。\n\n### SPI的加载\n\nSPI 是一种服务发现机制。它通过在ClassPath路径下的 **META-INF/services** 文件夹查找文件，自动加载文件里所定义的类。通过SPI机制可以让接口和实现类分离，服务提供者只提供接口，第三方来进行实现。SPI 的一个经典应用就是 JDBC，JAVA 只提供操作数据库的接口，而各个数据库厂商根据接口提供相应的实现，然后按照规则编写配置文件，使用者引入jar包就可以使用。\n由于接口是写在JDK中的，而且是由Bootstrap Classloader来加载的，而实现类是作为第三方包来加载的(默认是AppClassloader来加载)，根据类的委派规则，Bootstrap Classloader是不能主动委托AppclassLoader来加载第三方包的。这个问题JDK是通过**线程上下文类加载器**来解决的。\n\n### 代码热替换、模块热部署\n\n关于这部分，此处不再赘述，这篇文章写得很详细：[热加载原理解析与实现](https://blog.51cto.com/u_14006572/5711336)\n我们认为热部署打破双亲委派的原因是：\n以OSGi为例，加载一个类可能发生的查找行为和委派关系会比上图中显示的复杂，类加载时的查找规则如下：\n\n1. 以java.*开头的类，委派给父类加载器加载\n2. 否则，委派列表名单内的类，委派给父类加载器加载\n3. 否则，Import列表中的类，委派给Export这个类的Bundle的类加载器加载\n4. 否则，查找当前Bundle的ClassPath，使用自己的类加载器加载\n5. 否则，查找是否在自己的Fragment Bundle中，如果是，则委派给Fragment bundle的类加载器加载\n6. 否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载\n7. 否则，查找失败\n\n在OSGi里面，加载器的关系不再是双亲委派模型的树形架构，而是已经进一步发展成了一种更复杂的、运行时才能确定的网状结构。\n\n","source":"_posts/双亲委派模型应用及其规则的打破.md","raw":"---\ntitle: 双亲委派模型应用及其规则的打破\ndate: 2023-09-11 20:38:43\ntags: JVM虚拟机\n---\n> 本文整合《深入理解JAVA虚拟机》及自己的理解，若有错误敬请留言斧正。\n\n\n# 双亲委派模型\n\n## 双亲委派模型加载流程\n\n**向上委派：** 当一个类被加载时，默认会调用**Application ClassLoader**，但AppClassLoader并不会直接加载该类，而是通过parent变量找到其父类加载器(**Extension ClassLoader**)，委托给其父类进行加载，ExtClassLoader会委托给**Bootstrap ClassLoader**，Bootstrap CLassLoader没有父类了。\n**向下委派：**此时Bootstrap CLassLoader会对需要加载类尝试进行加载，如果无法加载则返回ExtClassLoader进行加载。同理，如果ExtClassLoader无法加载则返回AppClassLoader进行加载，如果AppClassLoader也无法加载则抛出ClassNotFoundException异常。上述过程有一个类加载器可以完成相关加载任务，则加载成功，存放其元数据并创建Class对象(JDK8之后Class对象是在堆区)。\n\n## 类加载器各自负责加载的类\n\n**Bootstrap CLassLoader：**负责加载你配置的环境变量JAVA_HOME/lib下的核心类库。\n**Extension ClassLoader：**负责加载JAVA_HOME/lib/ext下的扩展类库。\n**Application ClassLoader：**负责加载CLASSPATH下指定的类库。\n\n## 类加载流程代码实现\n\n```java\n    protected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // 首先，查找该类是否已经被加载过\n            Class<?> c = findLoadedClass(name);\n            // 未被加载\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    // 有父加载器，就让父加载器去加载\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    // 没有父加载器，则让BootStrap加载器去加载\n                    // 因为BootStrap类加载器没有父类加载器的\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // 父类无法加载，则自己调用 findClass 方法去加载\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n\n**总结loadClass的代码逻辑：**\n\n1. 先检查请求加载的类型是否已经被加载过\n2. 若没有则调用父加载器的loadClass()方法\n3. 若父加载器为空则默认使用启动类加载器作为父加载器。\n4. 假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。\n\n## 双亲委派模型的好处\n\n1. **防止加载同一个.class。** 通过委托去询问上级是否已经加载过该.class，如果加载过了，则不需要重新加载。保证了数据安全。\n2. **保证核心.class不被篡改。** 通过委托的方式，保证核心.class不被篡改，即使被篡改也不会被加载，即使被加载也不会是同一个class对象，因为不同的加载器加载同一个.class也不是同一个Class对象。这样则保证了Class的执行安全。\n\n# 打破双亲委派模型\n\n## 为什么需要打破双亲委派模型\n\n由于加载范围的限制带来的一些不灵活问题，导致此时需要破坏双亲委派模型。\n\n## 打破双亲委派的经典示例\n\n### Tomcat\n\nTomcat打破了双亲委派模型，具体解释这篇文章讲得很好，此处不赘述了：[Tomcat是如何打破\"双亲委派\"机制的?](https://developer.aliyun.com/article/1081332)\n![tomcat.png](https://s2.loli.net/2023/10/06/Kvoc4DY1xOV6efN.png)\n\n那么为什么我们认为 Tomcat 打破了双亲委派模型呢？\n因为 Web 应用默认的类加载顺序是（打破了双亲委派规则）：\n\n1. 先在本地缓存中查找该类是否已经加载过，如果加载过就返回缓存中的。\n2. 如果没有加载过，委托给AppClassLoader是否加载过，如果加载过就返回。\n3. 如果AppClassLoader也没加载过，委托给ExtClassLoader去加载，这么做的目的就是：防止应用自己的类库覆盖了核心类库，因为WebAppClassLoader需要打破双亲委托机制，假如应用里自定义了一个叫java.lang.String的类，如果先加载这个类，就会覆盖核心类库的java.lang.String，所以说它会优先尝试用ExtClassLoader去加载，因为ExtClassLoader加载不到同样也会委托给BootstrapClassLoader去加载，也就避免了覆盖了核心类库的问题。\n4. 如果ExtClassLoader也没有查找到，说明核心类库中没有这个类，那么就在本地应用目录下查找此类并加载。\n5. 如果本地应用目录下还有没有这个类，那么肯定不是应用自己定义的类，那么就由AppClassLoader去加载。这里是通过Class.forName()调用AppClassLoader类加载器的，因为Class.forName()的默认加载器就是AppClassLoader。\n6. 如果上述都没有找到，那么只能抛出ClassNotFoundException了。\n\n### SPI的加载\n\nSPI 是一种服务发现机制。它通过在ClassPath路径下的 **META-INF/services** 文件夹查找文件，自动加载文件里所定义的类。通过SPI机制可以让接口和实现类分离，服务提供者只提供接口，第三方来进行实现。SPI 的一个经典应用就是 JDBC，JAVA 只提供操作数据库的接口，而各个数据库厂商根据接口提供相应的实现，然后按照规则编写配置文件，使用者引入jar包就可以使用。\n由于接口是写在JDK中的，而且是由Bootstrap Classloader来加载的，而实现类是作为第三方包来加载的(默认是AppClassloader来加载)，根据类的委派规则，Bootstrap Classloader是不能主动委托AppclassLoader来加载第三方包的。这个问题JDK是通过**线程上下文类加载器**来解决的。\n\n### 代码热替换、模块热部署\n\n关于这部分，此处不再赘述，这篇文章写得很详细：[热加载原理解析与实现](https://blog.51cto.com/u_14006572/5711336)\n我们认为热部署打破双亲委派的原因是：\n以OSGi为例，加载一个类可能发生的查找行为和委派关系会比上图中显示的复杂，类加载时的查找规则如下：\n\n1. 以java.*开头的类，委派给父类加载器加载\n2. 否则，委派列表名单内的类，委派给父类加载器加载\n3. 否则，Import列表中的类，委派给Export这个类的Bundle的类加载器加载\n4. 否则，查找当前Bundle的ClassPath，使用自己的类加载器加载\n5. 否则，查找是否在自己的Fragment Bundle中，如果是，则委派给Fragment bundle的类加载器加载\n6. 否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载\n7. 否则，查找失败\n\n在OSGi里面，加载器的关系不再是双亲委派模型的树形架构，而是已经进一步发展成了一种更复杂的、运行时才能确定的网状结构。\n\n","slug":"双亲委派模型应用及其规则的打破","published":1,"updated":"2023-10-06T08:27:02.563Z","_id":"clnebhnvy0000iounhmbp7std","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文整合《深入理解JAVA虚拟机》及自己的理解，若有错误敬请留言斧正。</p>\n</blockquote>\n<h1 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h1><h2 id=\"双亲委派模型加载流程\"><a href=\"#双亲委派模型加载流程\" class=\"headerlink\" title=\"双亲委派模型加载流程\"></a>双亲委派模型加载流程</h2><p><strong>向上委派：</strong> 当一个类被加载时，默认会调用<strong>Application ClassLoader</strong>，但AppClassLoader并不会直接加载该类，而是通过parent变量找到其父类加载器(<strong>Extension ClassLoader</strong>)，委托给其父类进行加载，ExtClassLoader会委托给<strong>Bootstrap ClassLoader</strong>，Bootstrap CLassLoader没有父类了。<br><strong>向下委派：</strong>此时Bootstrap CLassLoader会对需要加载类尝试进行加载，如果无法加载则返回ExtClassLoader进行加载。同理，如果ExtClassLoader无法加载则返回AppClassLoader进行加载，如果AppClassLoader也无法加载则抛出ClassNotFoundException异常。上述过程有一个类加载器可以完成相关加载任务，则加载成功，存放其元数据并创建Class对象(JDK8之后Class对象是在堆区)。</p>\n<h2 id=\"类加载器各自负责加载的类\"><a href=\"#类加载器各自负责加载的类\" class=\"headerlink\" title=\"类加载器各自负责加载的类\"></a>类加载器各自负责加载的类</h2><p><strong>Bootstrap CLassLoader：</strong>负责加载你配置的环境变量JAVA_HOME&#x2F;lib下的核心类库。<br><strong>Extension ClassLoader：</strong>负责加载JAVA_HOME&#x2F;lib&#x2F;ext下的扩展类库。<br><strong>Application ClassLoader：</strong>负责加载CLASSPATH下指定的类库。</p>\n<h2 id=\"类加载流程代码实现\"><a href=\"#类加载流程代码实现\" class=\"headerlink\" title=\"类加载流程代码实现\"></a>类加载流程代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首先，查找该类是否已经被加载过</span></span><br><span class=\"line\">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">        <span class=\"comment\">// 未被加载</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 有父加载器，就让父加载器去加载</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 没有父加载器，则让BootStrap加载器去加载</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为BootStrap类加载器没有父类加载器的</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 父类无法加载，则自己调用 findClass 方法去加载</span></span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">            resolveClass(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结loadClass的代码逻辑：</strong></p>\n<ol>\n<li>先检查请求加载的类型是否已经被加载过</li>\n<li>若没有则调用父加载器的loadClass()方法</li>\n<li>若父加载器为空则默认使用启动类加载器作为父加载器。</li>\n<li>假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。</li>\n</ol>\n<h2 id=\"双亲委派模型的好处\"><a href=\"#双亲委派模型的好处\" class=\"headerlink\" title=\"双亲委派模型的好处\"></a>双亲委派模型的好处</h2><ol>\n<li><strong>防止加载同一个.class。</strong> 通过委托去询问上级是否已经加载过该.class，如果加载过了，则不需要重新加载。保证了数据安全。</li>\n<li><strong>保证核心.class不被篡改。</strong> 通过委托的方式，保证核心.class不被篡改，即使被篡改也不会被加载，即使被加载也不会是同一个class对象，因为不同的加载器加载同一个.class也不是同一个Class对象。这样则保证了Class的执行安全。</li>\n</ol>\n<h1 id=\"打破双亲委派模型\"><a href=\"#打破双亲委派模型\" class=\"headerlink\" title=\"打破双亲委派模型\"></a>打破双亲委派模型</h1><h2 id=\"为什么需要打破双亲委派模型\"><a href=\"#为什么需要打破双亲委派模型\" class=\"headerlink\" title=\"为什么需要打破双亲委派模型\"></a>为什么需要打破双亲委派模型</h2><p>由于加载范围的限制带来的一些不灵活问题，导致此时需要破坏双亲委派模型。</p>\n<h2 id=\"打破双亲委派的经典示例\"><a href=\"#打破双亲委派的经典示例\" class=\"headerlink\" title=\"打破双亲委派的经典示例\"></a>打破双亲委派的经典示例</h2><h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><p>Tomcat打破了双亲委派模型，具体解释这篇文章讲得很好，此处不赘述了：<a class=\"link\"   href=\"https://developer.aliyun.com/article/1081332\" >Tomcat是如何打破”双亲委派”机制的?<i class=\"fas fa-external-link-alt\"></i></a><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://s2.loli.net/2023/10/06/Kvoc4DY1xOV6efN.png\"\n                      alt=\"tomcat.png\"\n                ></p>\n<p>那么为什么我们认为 Tomcat 打破了双亲委派模型呢？<br>因为 Web 应用默认的类加载顺序是（打破了双亲委派规则）：</p>\n<ol>\n<li>先在本地缓存中查找该类是否已经加载过，如果加载过就返回缓存中的。</li>\n<li>如果没有加载过，委托给AppClassLoader是否加载过，如果加载过就返回。</li>\n<li>如果AppClassLoader也没加载过，委托给ExtClassLoader去加载，这么做的目的就是：防止应用自己的类库覆盖了核心类库，因为WebAppClassLoader需要打破双亲委托机制，假如应用里自定义了一个叫java.lang.String的类，如果先加载这个类，就会覆盖核心类库的java.lang.String，所以说它会优先尝试用ExtClassLoader去加载，因为ExtClassLoader加载不到同样也会委托给BootstrapClassLoader去加载，也就避免了覆盖了核心类库的问题。</li>\n<li>如果ExtClassLoader也没有查找到，说明核心类库中没有这个类，那么就在本地应用目录下查找此类并加载。</li>\n<li>如果本地应用目录下还有没有这个类，那么肯定不是应用自己定义的类，那么就由AppClassLoader去加载。这里是通过Class.forName()调用AppClassLoader类加载器的，因为Class.forName()的默认加载器就是AppClassLoader。</li>\n<li>如果上述都没有找到，那么只能抛出ClassNotFoundException了。</li>\n</ol>\n<h3 id=\"SPI的加载\"><a href=\"#SPI的加载\" class=\"headerlink\" title=\"SPI的加载\"></a>SPI的加载</h3><p>SPI 是一种服务发现机制。它通过在ClassPath路径下的 <strong>META-INF&#x2F;services</strong> 文件夹查找文件，自动加载文件里所定义的类。通过SPI机制可以让接口和实现类分离，服务提供者只提供接口，第三方来进行实现。SPI 的一个经典应用就是 JDBC，JAVA 只提供操作数据库的接口，而各个数据库厂商根据接口提供相应的实现，然后按照规则编写配置文件，使用者引入jar包就可以使用。<br>由于接口是写在JDK中的，而且是由Bootstrap Classloader来加载的，而实现类是作为第三方包来加载的(默认是AppClassloader来加载)，根据类的委派规则，Bootstrap Classloader是不能主动委托AppclassLoader来加载第三方包的。这个问题JDK是通过<strong>线程上下文类加载器</strong>来解决的。</p>\n<h3 id=\"代码热替换、模块热部署\"><a href=\"#代码热替换、模块热部署\" class=\"headerlink\" title=\"代码热替换、模块热部署\"></a>代码热替换、模块热部署</h3><p>关于这部分，此处不再赘述，这篇文章写得很详细：<a class=\"link\"   href=\"https://blog.51cto.com/u_14006572/5711336\" >热加载原理解析与实现<i class=\"fas fa-external-link-alt\"></i></a><br>我们认为热部署打破双亲委派的原因是：<br>以OSGi为例，加载一个类可能发生的查找行为和委派关系会比上图中显示的复杂，类加载时的查找规则如下：</p>\n<ol>\n<li>以java.*开头的类，委派给父类加载器加载</li>\n<li>否则，委派列表名单内的类，委派给父类加载器加载</li>\n<li>否则，Import列表中的类，委派给Export这个类的Bundle的类加载器加载</li>\n<li>否则，查找当前Bundle的ClassPath，使用自己的类加载器加载</li>\n<li>否则，查找是否在自己的Fragment Bundle中，如果是，则委派给Fragment bundle的类加载器加载</li>\n<li>否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载</li>\n<li>否则，查找失败</li>\n</ol>\n<p>在OSGi里面，加载器的关系不再是双亲委派模型的树形架构，而是已经进一步发展成了一种更复杂的、运行时才能确定的网状结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文整合《深入理解JAVA虚拟机》及自己的理解，若有错误敬请留言斧正。</p>\n</blockquote>\n<h1 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h1><h2 id=\"双亲委派模型加载流程\"><a href=\"#双亲委派模型加载流程\" class=\"headerlink\" title=\"双亲委派模型加载流程\"></a>双亲委派模型加载流程</h2><p><strong>向上委派：</strong> 当一个类被加载时，默认会调用<strong>Application ClassLoader</strong>，但AppClassLoader并不会直接加载该类，而是通过parent变量找到其父类加载器(<strong>Extension ClassLoader</strong>)，委托给其父类进行加载，ExtClassLoader会委托给<strong>Bootstrap ClassLoader</strong>，Bootstrap CLassLoader没有父类了。<br><strong>向下委派：</strong>此时Bootstrap CLassLoader会对需要加载类尝试进行加载，如果无法加载则返回ExtClassLoader进行加载。同理，如果ExtClassLoader无法加载则返回AppClassLoader进行加载，如果AppClassLoader也无法加载则抛出ClassNotFoundException异常。上述过程有一个类加载器可以完成相关加载任务，则加载成功，存放其元数据并创建Class对象(JDK8之后Class对象是在堆区)。</p>\n<h2 id=\"类加载器各自负责加载的类\"><a href=\"#类加载器各自负责加载的类\" class=\"headerlink\" title=\"类加载器各自负责加载的类\"></a>类加载器各自负责加载的类</h2><p><strong>Bootstrap CLassLoader：</strong>负责加载你配置的环境变量JAVA_HOME&#x2F;lib下的核心类库。<br><strong>Extension ClassLoader：</strong>负责加载JAVA_HOME&#x2F;lib&#x2F;ext下的扩展类库。<br><strong>Application ClassLoader：</strong>负责加载CLASSPATH下指定的类库。</p>\n<h2 id=\"类加载流程代码实现\"><a href=\"#类加载流程代码实现\" class=\"headerlink\" title=\"类加载流程代码实现\"></a>类加载流程代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首先，查找该类是否已经被加载过</span></span><br><span class=\"line\">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">        <span class=\"comment\">// 未被加载</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 有父加载器，就让父加载器去加载</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 没有父加载器，则让BootStrap加载器去加载</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为BootStrap类加载器没有父类加载器的</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 父类无法加载，则自己调用 findClass 方法去加载</span></span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">            resolveClass(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结loadClass的代码逻辑：</strong></p>\n<ol>\n<li>先检查请求加载的类型是否已经被加载过</li>\n<li>若没有则调用父加载器的loadClass()方法</li>\n<li>若父加载器为空则默认使用启动类加载器作为父加载器。</li>\n<li>假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。</li>\n</ol>\n<h2 id=\"双亲委派模型的好处\"><a href=\"#双亲委派模型的好处\" class=\"headerlink\" title=\"双亲委派模型的好处\"></a>双亲委派模型的好处</h2><ol>\n<li><strong>防止加载同一个.class。</strong> 通过委托去询问上级是否已经加载过该.class，如果加载过了，则不需要重新加载。保证了数据安全。</li>\n<li><strong>保证核心.class不被篡改。</strong> 通过委托的方式，保证核心.class不被篡改，即使被篡改也不会被加载，即使被加载也不会是同一个class对象，因为不同的加载器加载同一个.class也不是同一个Class对象。这样则保证了Class的执行安全。</li>\n</ol>\n<h1 id=\"打破双亲委派模型\"><a href=\"#打破双亲委派模型\" class=\"headerlink\" title=\"打破双亲委派模型\"></a>打破双亲委派模型</h1><h2 id=\"为什么需要打破双亲委派模型\"><a href=\"#为什么需要打破双亲委派模型\" class=\"headerlink\" title=\"为什么需要打破双亲委派模型\"></a>为什么需要打破双亲委派模型</h2><p>由于加载范围的限制带来的一些不灵活问题，导致此时需要破坏双亲委派模型。</p>\n<h2 id=\"打破双亲委派的经典示例\"><a href=\"#打破双亲委派的经典示例\" class=\"headerlink\" title=\"打破双亲委派的经典示例\"></a>打破双亲委派的经典示例</h2><h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><p>Tomcat打破了双亲委派模型，具体解释这篇文章讲得很好，此处不赘述了：<a href=\"https://developer.aliyun.com/article/1081332\">Tomcat是如何打破”双亲委派”机制的?</a><br><img src=\"https://s2.loli.net/2023/10/06/Kvoc4DY1xOV6efN.png\" alt=\"tomcat.png\"></p>\n<p>那么为什么我们认为 Tomcat 打破了双亲委派模型呢？<br>因为 Web 应用默认的类加载顺序是（打破了双亲委派规则）：</p>\n<ol>\n<li>先在本地缓存中查找该类是否已经加载过，如果加载过就返回缓存中的。</li>\n<li>如果没有加载过，委托给AppClassLoader是否加载过，如果加载过就返回。</li>\n<li>如果AppClassLoader也没加载过，委托给ExtClassLoader去加载，这么做的目的就是：防止应用自己的类库覆盖了核心类库，因为WebAppClassLoader需要打破双亲委托机制，假如应用里自定义了一个叫java.lang.String的类，如果先加载这个类，就会覆盖核心类库的java.lang.String，所以说它会优先尝试用ExtClassLoader去加载，因为ExtClassLoader加载不到同样也会委托给BootstrapClassLoader去加载，也就避免了覆盖了核心类库的问题。</li>\n<li>如果ExtClassLoader也没有查找到，说明核心类库中没有这个类，那么就在本地应用目录下查找此类并加载。</li>\n<li>如果本地应用目录下还有没有这个类，那么肯定不是应用自己定义的类，那么就由AppClassLoader去加载。这里是通过Class.forName()调用AppClassLoader类加载器的，因为Class.forName()的默认加载器就是AppClassLoader。</li>\n<li>如果上述都没有找到，那么只能抛出ClassNotFoundException了。</li>\n</ol>\n<h3 id=\"SPI的加载\"><a href=\"#SPI的加载\" class=\"headerlink\" title=\"SPI的加载\"></a>SPI的加载</h3><p>SPI 是一种服务发现机制。它通过在ClassPath路径下的 <strong>META-INF&#x2F;services</strong> 文件夹查找文件，自动加载文件里所定义的类。通过SPI机制可以让接口和实现类分离，服务提供者只提供接口，第三方来进行实现。SPI 的一个经典应用就是 JDBC，JAVA 只提供操作数据库的接口，而各个数据库厂商根据接口提供相应的实现，然后按照规则编写配置文件，使用者引入jar包就可以使用。<br>由于接口是写在JDK中的，而且是由Bootstrap Classloader来加载的，而实现类是作为第三方包来加载的(默认是AppClassloader来加载)，根据类的委派规则，Bootstrap Classloader是不能主动委托AppclassLoader来加载第三方包的。这个问题JDK是通过<strong>线程上下文类加载器</strong>来解决的。</p>\n<h3 id=\"代码热替换、模块热部署\"><a href=\"#代码热替换、模块热部署\" class=\"headerlink\" title=\"代码热替换、模块热部署\"></a>代码热替换、模块热部署</h3><p>关于这部分，此处不再赘述，这篇文章写得很详细：<a href=\"https://blog.51cto.com/u_14006572/5711336\">热加载原理解析与实现</a><br>我们认为热部署打破双亲委派的原因是：<br>以OSGi为例，加载一个类可能发生的查找行为和委派关系会比上图中显示的复杂，类加载时的查找规则如下：</p>\n<ol>\n<li>以java.*开头的类，委派给父类加载器加载</li>\n<li>否则，委派列表名单内的类，委派给父类加载器加载</li>\n<li>否则，Import列表中的类，委派给Export这个类的Bundle的类加载器加载</li>\n<li>否则，查找当前Bundle的ClassPath，使用自己的类加载器加载</li>\n<li>否则，查找是否在自己的Fragment Bundle中，如果是，则委派给Fragment bundle的类加载器加载</li>\n<li>否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载</li>\n<li>否则，查找失败</li>\n</ol>\n<p>在OSGi里面，加载器的关系不再是双亲委派模型的树形架构，而是已经进一步发展成了一种更复杂的、运行时才能确定的网状结构。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://s2.loli.net/2023/10/06/Kvoc4DY1xOV6efN.png","popularPost_tmp_gaData":{"updated":"Fri Oct 06 2023 16:27:02 GMT+0800 (中国标准时间)","title":"双亲委派模型应用及其规则的打破","path":"2023/09/11/双亲委派模型应用及其规则的打破/","eyeCatchImage":"https://s2.loli.net/2023/10/06/Kvoc4DY1xOV6efN.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-11T12:38:43.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-11T12:38:43.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["JVM虚拟机"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"海量数据处理场景","date":"2023-09-10T13:01:55.000Z","_content":"# 大文件找top100单词\n\n### 题目描述\n\n有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。\n\n### 解答思路\n\n由于内存限制，我们无法直接将大文件所有词一次性全部读到内存中。因此，可以采用分治策略，把一个大文件分解成n个小文件，保证每个文件的大小小于内存大小限制（这里是 1MB），进而直接将单个小文件读取到内存中进行处理。\n**1.哈希取余**\n遍历大文件的每个词word，执行 hash(word) % 5000，将结果为 i 的词存放到文件 file(i) 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解，直到小于1MB为止。\n**2.统计频数**\n接着统计每个小文件 file(i) 中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现。其中 key 为词，value 为该词出现的频率。遍历到词 word，如果在 HashMap 中不存在，则执行 map.put(word, 1)；存在则执行 map.put(word, map.get(word)+1)，将该词频数加 1。\n**3.小顶堆**\n接下来，我们构建一个堆大小为 100 的小顶堆来找出所有词中出现频数最高的 top100 单词。依次遍历每个小文件，遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后调整小顶堆，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。\n**注意：若要找出最小top100单词的方法与之类似，将小顶堆换成大顶堆就好了。**\n从序列中选择最大的K个数（小顶堆）\n场景：要选择最大的k个数。\n做法：【构造小顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最小值）】 进行比较。如果新数比堆顶元素大，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素小，则说明堆中的k个数都比新数大，所以不用进行操作。\n从序列中选择最小的K个数（大顶堆）\n场景：要选择最小的k个数。\n做法：【构造大顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最大数）】 进行比较。如果新数比堆顶元素小，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素大，则说明堆中的k个数都比新数小，所以不用进行操作。\n\n# 大量数据中找出不重复整数\n\n### 题目描述\n\n在 2 亿个整数中找出不重复的整数，内存不足以容纳这 2 亿个整数。\n\n### 解答思路\n\n#### 方法一：分治法\n\n与前面的题目方法类似，先将 2 亿个数划分到多个小文件，用 HashSet/HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。\n\n#### 方法二：位图法\n\n位图是指用一个或多个 bit 来标记某个元素对应的值。因为使用bit为单位存储数据可以大大节省存储空间。对于这道题，我们可以用 2 个 bit 来表示各个数字的状态：\n\n- 00 表示这个数字没出现过；\n- 01 表示这个数字出现过一次（即为题目所找的不重复整数）；\n- 10 表示这个数字出现了多次。\n\n2亿个整数，总共所需内存为\n\n```shell\n2亿个整数 × 4字节/整数 = 8亿字节\n1GB等于1,073,741,824字节。\n8亿字节 ÷ 1,073,741,824字节/GB ≈ 0.745GB。\n```\n\n因此，如果此题的可用内存超过 0.75GB 时，可以采用位图法。\n遍历 2 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。\n\n# 大量数据中判断一个数是否存在\n\n### 题目描述\n\n给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？\n\n### 解答思路\n\n#### 方法一：分治法\n\n分治法解决，与前面类似，不再赘述。\n\n#### 方法二：位图法\n\n40 亿个不重复整数，我们用 40 亿个 bit 来表示，初始位均为 0，那么总共需要内存：4,000,000,000b≈512M。\n我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。\n\n# 大量数据中找出中位数\n\n### 题目描述\n\n从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 (N+1)/2 个数；当样本数为偶数时，中位数为 第 N/2 个数与第 1+N/2 个数的均值。\n\n### 解答思路\n\n如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 O(NlogN)。这里使用其他方法。\n\n#### 方法一：双堆法\n\n维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数**小于等于**小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。\n若数据总数为**偶数**，当这两个堆建好之后，**中位数就是这两个堆顶元素的平均值**。当数据总数为**奇数**时，根据两个堆的大小，**中位数一定在数据多的堆的堆顶**。\n以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法**适用于数据量较小的情况**。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了。\n\n#### 方法二：分治法\n\n分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。\n顺序读取这 5 亿个数字，对于读取到的数字 number，如果它对应的二进制中最高位为1，则把这个数字写到 file(1) 中，否则写入 file(0) 中。通过这一步，可以把这 5 亿个数划**分为两部分**，而且 file(0) 中的数都大于 file(1) 中的数（最高位是符号位）。\n划分之后，可以非常容易地知道中位数是在 file(0) 还是 file(1) 中。假设 file(1) 中有 1 亿个数，那么中位数一定在 file(0) 中，且是在 file(0) 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。\n由于5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 file(1) 有一亿个数，那么中位数就是 file(0) 中从第 1.5 亿个数开始的两个数求得的平均值。\n对于 file(0) 可以用次高位的二进制继续将文件一分为二，如此划分下去，**直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。**\n当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。\n\n# 大文件查询频度排序\n\n### 题目描述\n\n有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。\n\n### 解答思路\n\n如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。\n\n#### 方法一：HashMap 法\n\n如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。\n\n#### 方法二：分治法\n\n分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。我们顺序遍历 10 个文件中的 query，通过 Hash 函数 hash(query) % 10 把这些 query 划分到 10 个小文件中。之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到零外一个单独文件中。\n接着对所有文件按照 query 的次数进行排序，这里可以使用**归并排序**（由于无法把所有 query 都读入内存，因此需要使用**外排序**）。\n\n**如何理解外排序？**\n例如，有一个含有 10000 个记录的文件，但是内存的可使用容量仅为 1000 个记录，毫无疑问需要使用外部排序算法，具体分为两步：\n\n- 将整个文件其等分为 10 个临时文件（每个文件中含有 1000 个记录），然后将这 10 个文件依次进入内存，采取适当的内存排序算法对其中的记录进行排序，将得到的有序文件（初始归并段）移至外存。\n- 对得到的 10 个初始归并段进行如图 1 的两两归并，直至得到一个完整的有序文件。\n![image.png](https://cdn.staticaly.com/gh/1294566108/1294566108.github.io@release/images/outSourt.pkuo99qstj4.webp)\n\n**注意：** 在实际归并的过程中，由于内存容量的限制不能满足同时将 2 个归并段全部完整的读入内存进行归并，只能不断地取 2 个归并段中的每一小部分进行归并，通过不断地读数据和向外存写数据，直至 2 个归并段完成归并变为 1 个大的有序文件。","source":"_posts/海量数据处理场景.md","raw":"---\ntitle: 海量数据处理场景\ndate: 2023-09-10 21:01:55\ntags: 场景题\n---\n# 大文件找top100单词\n\n### 题目描述\n\n有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。\n\n### 解答思路\n\n由于内存限制，我们无法直接将大文件所有词一次性全部读到内存中。因此，可以采用分治策略，把一个大文件分解成n个小文件，保证每个文件的大小小于内存大小限制（这里是 1MB），进而直接将单个小文件读取到内存中进行处理。\n**1.哈希取余**\n遍历大文件的每个词word，执行 hash(word) % 5000，将结果为 i 的词存放到文件 file(i) 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解，直到小于1MB为止。\n**2.统计频数**\n接着统计每个小文件 file(i) 中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现。其中 key 为词，value 为该词出现的频率。遍历到词 word，如果在 HashMap 中不存在，则执行 map.put(word, 1)；存在则执行 map.put(word, map.get(word)+1)，将该词频数加 1。\n**3.小顶堆**\n接下来，我们构建一个堆大小为 100 的小顶堆来找出所有词中出现频数最高的 top100 单词。依次遍历每个小文件，遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后调整小顶堆，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。\n**注意：若要找出最小top100单词的方法与之类似，将小顶堆换成大顶堆就好了。**\n从序列中选择最大的K个数（小顶堆）\n场景：要选择最大的k个数。\n做法：【构造小顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最小值）】 进行比较。如果新数比堆顶元素大，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素小，则说明堆中的k个数都比新数大，所以不用进行操作。\n从序列中选择最小的K个数（大顶堆）\n场景：要选择最小的k个数。\n做法：【构造大顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最大数）】 进行比较。如果新数比堆顶元素小，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素大，则说明堆中的k个数都比新数小，所以不用进行操作。\n\n# 大量数据中找出不重复整数\n\n### 题目描述\n\n在 2 亿个整数中找出不重复的整数，内存不足以容纳这 2 亿个整数。\n\n### 解答思路\n\n#### 方法一：分治法\n\n与前面的题目方法类似，先将 2 亿个数划分到多个小文件，用 HashSet/HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。\n\n#### 方法二：位图法\n\n位图是指用一个或多个 bit 来标记某个元素对应的值。因为使用bit为单位存储数据可以大大节省存储空间。对于这道题，我们可以用 2 个 bit 来表示各个数字的状态：\n\n- 00 表示这个数字没出现过；\n- 01 表示这个数字出现过一次（即为题目所找的不重复整数）；\n- 10 表示这个数字出现了多次。\n\n2亿个整数，总共所需内存为\n\n```shell\n2亿个整数 × 4字节/整数 = 8亿字节\n1GB等于1,073,741,824字节。\n8亿字节 ÷ 1,073,741,824字节/GB ≈ 0.745GB。\n```\n\n因此，如果此题的可用内存超过 0.75GB 时，可以采用位图法。\n遍历 2 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。\n\n# 大量数据中判断一个数是否存在\n\n### 题目描述\n\n给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？\n\n### 解答思路\n\n#### 方法一：分治法\n\n分治法解决，与前面类似，不再赘述。\n\n#### 方法二：位图法\n\n40 亿个不重复整数，我们用 40 亿个 bit 来表示，初始位均为 0，那么总共需要内存：4,000,000,000b≈512M。\n我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。\n\n# 大量数据中找出中位数\n\n### 题目描述\n\n从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 (N+1)/2 个数；当样本数为偶数时，中位数为 第 N/2 个数与第 1+N/2 个数的均值。\n\n### 解答思路\n\n如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 O(NlogN)。这里使用其他方法。\n\n#### 方法一：双堆法\n\n维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数**小于等于**小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。\n若数据总数为**偶数**，当这两个堆建好之后，**中位数就是这两个堆顶元素的平均值**。当数据总数为**奇数**时，根据两个堆的大小，**中位数一定在数据多的堆的堆顶**。\n以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法**适用于数据量较小的情况**。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了。\n\n#### 方法二：分治法\n\n分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。\n顺序读取这 5 亿个数字，对于读取到的数字 number，如果它对应的二进制中最高位为1，则把这个数字写到 file(1) 中，否则写入 file(0) 中。通过这一步，可以把这 5 亿个数划**分为两部分**，而且 file(0) 中的数都大于 file(1) 中的数（最高位是符号位）。\n划分之后，可以非常容易地知道中位数是在 file(0) 还是 file(1) 中。假设 file(1) 中有 1 亿个数，那么中位数一定在 file(0) 中，且是在 file(0) 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。\n由于5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 file(1) 有一亿个数，那么中位数就是 file(0) 中从第 1.5 亿个数开始的两个数求得的平均值。\n对于 file(0) 可以用次高位的二进制继续将文件一分为二，如此划分下去，**直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。**\n当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。\n\n# 大文件查询频度排序\n\n### 题目描述\n\n有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。\n\n### 解答思路\n\n如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。\n\n#### 方法一：HashMap 法\n\n如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。\n\n#### 方法二：分治法\n\n分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。我们顺序遍历 10 个文件中的 query，通过 Hash 函数 hash(query) % 10 把这些 query 划分到 10 个小文件中。之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到零外一个单独文件中。\n接着对所有文件按照 query 的次数进行排序，这里可以使用**归并排序**（由于无法把所有 query 都读入内存，因此需要使用**外排序**）。\n\n**如何理解外排序？**\n例如，有一个含有 10000 个记录的文件，但是内存的可使用容量仅为 1000 个记录，毫无疑问需要使用外部排序算法，具体分为两步：\n\n- 将整个文件其等分为 10 个临时文件（每个文件中含有 1000 个记录），然后将这 10 个文件依次进入内存，采取适当的内存排序算法对其中的记录进行排序，将得到的有序文件（初始归并段）移至外存。\n- 对得到的 10 个初始归并段进行如图 1 的两两归并，直至得到一个完整的有序文件。\n![image.png](https://cdn.staticaly.com/gh/1294566108/1294566108.github.io@release/images/outSourt.pkuo99qstj4.webp)\n\n**注意：** 在实际归并的过程中，由于内存容量的限制不能满足同时将 2 个归并段全部完整的读入内存进行归并，只能不断地取 2 个归并段中的每一小部分进行归并，通过不断地读数据和向外存写数据，直至 2 个归并段完成归并变为 1 个大的有序文件。","slug":"海量数据处理场景","published":1,"updated":"2023-09-11T17:04:26.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnebhnw40002ioun7bz6chnx","content":"<h1 id=\"大文件找top100单词\"><a href=\"#大文件找top100单词\" class=\"headerlink\" title=\"大文件找top100单词\"></a>大文件找top100单词</h1><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。</p>\n<h3 id=\"解答思路\"><a href=\"#解答思路\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><p>由于内存限制，我们无法直接将大文件所有词一次性全部读到内存中。因此，可以采用分治策略，把一个大文件分解成n个小文件，保证每个文件的大小小于内存大小限制（这里是 1MB），进而直接将单个小文件读取到内存中进行处理。<br><strong>1.哈希取余</strong><br>遍历大文件的每个词word，执行 hash(word) % 5000，将结果为 i 的词存放到文件 file(i) 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解，直到小于1MB为止。<br><strong>2.统计频数</strong><br>接着统计每个小文件 file(i) 中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现。其中 key 为词，value 为该词出现的频率。遍历到词 word，如果在 HashMap 中不存在，则执行 map.put(word, 1)；存在则执行 map.put(word, map.get(word)+1)，将该词频数加 1。<br><strong>3.小顶堆</strong><br>接下来，我们构建一个堆大小为 100 的小顶堆来找出所有词中出现频数最高的 top100 单词。依次遍历每个小文件，遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后调整小顶堆，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。<br><strong>注意：若要找出最小top100单词的方法与之类似，将小顶堆换成大顶堆就好了。</strong><br>从序列中选择最大的K个数（小顶堆）<br>场景：要选择最大的k个数。<br>做法：【构造小顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最小值）】 进行比较。如果新数比堆顶元素大，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素小，则说明堆中的k个数都比新数大，所以不用进行操作。<br>从序列中选择最小的K个数（大顶堆）<br>场景：要选择最小的k个数。<br>做法：【构造大顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最大数）】 进行比较。如果新数比堆顶元素小，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素大，则说明堆中的k个数都比新数小，所以不用进行操作。</p>\n<h1 id=\"大量数据中找出不重复整数\"><a href=\"#大量数据中找出不重复整数\" class=\"headerlink\" title=\"大量数据中找出不重复整数\"></a>大量数据中找出不重复整数</h1><h3 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在 2 亿个整数中找出不重复的整数，内存不足以容纳这 2 亿个整数。</p>\n<h3 id=\"解答思路-1\"><a href=\"#解答思路-1\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><h4 id=\"方法一：分治法\"><a href=\"#方法一：分治法\" class=\"headerlink\" title=\"方法一：分治法\"></a>方法一：分治法</h4><p>与前面的题目方法类似，先将 2 亿个数划分到多个小文件，用 HashSet&#x2F;HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。</p>\n<h4 id=\"方法二：位图法\"><a href=\"#方法二：位图法\" class=\"headerlink\" title=\"方法二：位图法\"></a>方法二：位图法</h4><p>位图是指用一个或多个 bit 来标记某个元素对应的值。因为使用bit为单位存储数据可以大大节省存储空间。对于这道题，我们可以用 2 个 bit 来表示各个数字的状态：</p>\n<ul>\n<li>00 表示这个数字没出现过；</li>\n<li>01 表示这个数字出现过一次（即为题目所找的不重复整数）；</li>\n<li>10 表示这个数字出现了多次。</li>\n</ul>\n<p>2亿个整数，总共所需内存为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2亿个整数 × 4字节/整数 = 8亿字节</span><br><span class=\"line\">1GB等于1,073,741,824字节。</span><br><span class=\"line\">8亿字节 ÷ 1,073,741,824字节/GB ≈ 0.745GB。</span><br></pre></td></tr></table></figure>\n\n<p>因此，如果此题的可用内存超过 0.75GB 时，可以采用位图法。<br>遍历 2 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。</p>\n<h1 id=\"大量数据中判断一个数是否存在\"><a href=\"#大量数据中判断一个数是否存在\" class=\"headerlink\" title=\"大量数据中判断一个数是否存在\"></a>大量数据中判断一个数是否存在</h1><h3 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？</p>\n<h3 id=\"解答思路-2\"><a href=\"#解答思路-2\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><h4 id=\"方法一：分治法-1\"><a href=\"#方法一：分治法-1\" class=\"headerlink\" title=\"方法一：分治法\"></a>方法一：分治法</h4><p>分治法解决，与前面类似，不再赘述。</p>\n<h4 id=\"方法二：位图法-1\"><a href=\"#方法二：位图法-1\" class=\"headerlink\" title=\"方法二：位图法\"></a>方法二：位图法</h4><p>40 亿个不重复整数，我们用 40 亿个 bit 来表示，初始位均为 0，那么总共需要内存：4,000,000,000b≈512M。<br>我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。</p>\n<h1 id=\"大量数据中找出中位数\"><a href=\"#大量数据中找出中位数\" class=\"headerlink\" title=\"大量数据中找出中位数\"></a>大量数据中找出中位数</h1><h3 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 (N+1)&#x2F;2 个数；当样本数为偶数时，中位数为 第 N&#x2F;2 个数与第 1+N&#x2F;2 个数的均值。</p>\n<h3 id=\"解答思路-3\"><a href=\"#解答思路-3\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><p>如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 O(NlogN)。这里使用其他方法。</p>\n<h4 id=\"方法一：双堆法\"><a href=\"#方法一：双堆法\" class=\"headerlink\" title=\"方法一：双堆法\"></a>方法一：双堆法</h4><p>维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数<strong>小于等于</strong>小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。<br>若数据总数为<strong>偶数</strong>，当这两个堆建好之后，<strong>中位数就是这两个堆顶元素的平均值</strong>。当数据总数为<strong>奇数</strong>时，根据两个堆的大小，<strong>中位数一定在数据多的堆的堆顶</strong>。<br>以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法<strong>适用于数据量较小的情况</strong>。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了。</p>\n<h4 id=\"方法二：分治法\"><a href=\"#方法二：分治法\" class=\"headerlink\" title=\"方法二：分治法\"></a>方法二：分治法</h4><p>分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。<br>顺序读取这 5 亿个数字，对于读取到的数字 number，如果它对应的二进制中最高位为1，则把这个数字写到 file(1) 中，否则写入 file(0) 中。通过这一步，可以把这 5 亿个数划<strong>分为两部分</strong>，而且 file(0) 中的数都大于 file(1) 中的数（最高位是符号位）。<br>划分之后，可以非常容易地知道中位数是在 file(0) 还是 file(1) 中。假设 file(1) 中有 1 亿个数，那么中位数一定在 file(0) 中，且是在 file(0) 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。<br>由于5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 file(1) 有一亿个数，那么中位数就是 file(0) 中从第 1.5 亿个数开始的两个数求得的平均值。<br>对于 file(0) 可以用次高位的二进制继续将文件一分为二，如此划分下去，<strong>直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。</strong><br>当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。</p>\n<h1 id=\"大文件查询频度排序\"><a href=\"#大文件查询频度排序\" class=\"headerlink\" title=\"大文件查询频度排序\"></a>大文件查询频度排序</h1><h3 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。</p>\n<h3 id=\"解答思路-4\"><a href=\"#解答思路-4\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><p>如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。</p>\n<h4 id=\"方法一：HashMap-法\"><a href=\"#方法一：HashMap-法\" class=\"headerlink\" title=\"方法一：HashMap 法\"></a>方法一：HashMap 法</h4><p>如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。</p>\n<h4 id=\"方法二：分治法-1\"><a href=\"#方法二：分治法-1\" class=\"headerlink\" title=\"方法二：分治法\"></a>方法二：分治法</h4><p>分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。我们顺序遍历 10 个文件中的 query，通过 Hash 函数 hash(query) % 10 把这些 query 划分到 10 个小文件中。之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到零外一个单独文件中。<br>接着对所有文件按照 query 的次数进行排序，这里可以使用<strong>归并排序</strong>（由于无法把所有 query 都读入内存，因此需要使用<strong>外排序</strong>）。</p>\n<p><strong>如何理解外排序？</strong><br>例如，有一个含有 10000 个记录的文件，但是内存的可使用容量仅为 1000 个记录，毫无疑问需要使用外部排序算法，具体分为两步：</p>\n<ul>\n<li>将整个文件其等分为 10 个临时文件（每个文件中含有 1000 个记录），然后将这 10 个文件依次进入内存，采取适当的内存排序算法对其中的记录进行排序，将得到的有序文件（初始归并段）移至外存。</li>\n<li>对得到的 10 个初始归并段进行如图 1 的两两归并，直至得到一个完整的有序文件。<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://cdn.staticaly.com/gh/1294566108/1294566108.github.io@release/images/outSourt.pkuo99qstj4.webp\"\n                      alt=\"image.png\"\n                ></li>\n</ul>\n<p><strong>注意：</strong> 在实际归并的过程中，由于内存容量的限制不能满足同时将 2 个归并段全部完整的读入内存进行归并，只能不断地取 2 个归并段中的每一小部分进行归并，通过不断地读数据和向外存写数据，直至 2 个归并段完成归并变为 1 个大的有序文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大文件找top100单词\"><a href=\"#大文件找top100单词\" class=\"headerlink\" title=\"大文件找top100单词\"></a>大文件找top100单词</h1><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。</p>\n<h3 id=\"解答思路\"><a href=\"#解答思路\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><p>由于内存限制，我们无法直接将大文件所有词一次性全部读到内存中。因此，可以采用分治策略，把一个大文件分解成n个小文件，保证每个文件的大小小于内存大小限制（这里是 1MB），进而直接将单个小文件读取到内存中进行处理。<br><strong>1.哈希取余</strong><br>遍历大文件的每个词word，执行 hash(word) % 5000，将结果为 i 的词存放到文件 file(i) 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解，直到小于1MB为止。<br><strong>2.统计频数</strong><br>接着统计每个小文件 file(i) 中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现。其中 key 为词，value 为该词出现的频率。遍历到词 word，如果在 HashMap 中不存在，则执行 map.put(word, 1)；存在则执行 map.put(word, map.get(word)+1)，将该词频数加 1。<br><strong>3.小顶堆</strong><br>接下来，我们构建一个堆大小为 100 的小顶堆来找出所有词中出现频数最高的 top100 单词。依次遍历每个小文件，遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后调整小顶堆，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。<br><strong>注意：若要找出最小top100单词的方法与之类似，将小顶堆换成大顶堆就好了。</strong><br>从序列中选择最大的K个数（小顶堆）<br>场景：要选择最大的k个数。<br>做法：【构造小顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最小值）】 进行比较。如果新数比堆顶元素大，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素小，则说明堆中的k个数都比新数大，所以不用进行操作。<br>从序列中选择最小的K个数（大顶堆）<br>场景：要选择最小的k个数。<br>做法：【构造大顶堆（一共k个数）】，每次取数组中剩余数与 【堆顶的元素（k个数中的最大数）】 进行比较。如果新数比堆顶元素小，则删除堆顶元素，并添加这个新数到堆中；如果新数比堆顶元素大，则说明堆中的k个数都比新数小，所以不用进行操作。</p>\n<h1 id=\"大量数据中找出不重复整数\"><a href=\"#大量数据中找出不重复整数\" class=\"headerlink\" title=\"大量数据中找出不重复整数\"></a>大量数据中找出不重复整数</h1><h3 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在 2 亿个整数中找出不重复的整数，内存不足以容纳这 2 亿个整数。</p>\n<h3 id=\"解答思路-1\"><a href=\"#解答思路-1\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><h4 id=\"方法一：分治法\"><a href=\"#方法一：分治法\" class=\"headerlink\" title=\"方法一：分治法\"></a>方法一：分治法</h4><p>与前面的题目方法类似，先将 2 亿个数划分到多个小文件，用 HashSet&#x2F;HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。</p>\n<h4 id=\"方法二：位图法\"><a href=\"#方法二：位图法\" class=\"headerlink\" title=\"方法二：位图法\"></a>方法二：位图法</h4><p>位图是指用一个或多个 bit 来标记某个元素对应的值。因为使用bit为单位存储数据可以大大节省存储空间。对于这道题，我们可以用 2 个 bit 来表示各个数字的状态：</p>\n<ul>\n<li>00 表示这个数字没出现过；</li>\n<li>01 表示这个数字出现过一次（即为题目所找的不重复整数）；</li>\n<li>10 表示这个数字出现了多次。</li>\n</ul>\n<p>2亿个整数，总共所需内存为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2亿个整数 × 4字节/整数 = 8亿字节</span><br><span class=\"line\">1GB等于1,073,741,824字节。</span><br><span class=\"line\">8亿字节 ÷ 1,073,741,824字节/GB ≈ 0.745GB。</span><br></pre></td></tr></table></figure>\n\n<p>因此，如果此题的可用内存超过 0.75GB 时，可以采用位图法。<br>遍历 2 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。</p>\n<h1 id=\"大量数据中判断一个数是否存在\"><a href=\"#大量数据中判断一个数是否存在\" class=\"headerlink\" title=\"大量数据中判断一个数是否存在\"></a>大量数据中判断一个数是否存在</h1><h3 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？</p>\n<h3 id=\"解答思路-2\"><a href=\"#解答思路-2\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><h4 id=\"方法一：分治法-1\"><a href=\"#方法一：分治法-1\" class=\"headerlink\" title=\"方法一：分治法\"></a>方法一：分治法</h4><p>分治法解决，与前面类似，不再赘述。</p>\n<h4 id=\"方法二：位图法-1\"><a href=\"#方法二：位图法-1\" class=\"headerlink\" title=\"方法二：位图法\"></a>方法二：位图法</h4><p>40 亿个不重复整数，我们用 40 亿个 bit 来表示，初始位均为 0，那么总共需要内存：4,000,000,000b≈512M。<br>我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。</p>\n<h1 id=\"大量数据中找出中位数\"><a href=\"#大量数据中找出中位数\" class=\"headerlink\" title=\"大量数据中找出中位数\"></a>大量数据中找出中位数</h1><h3 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 (N+1)&#x2F;2 个数；当样本数为偶数时，中位数为 第 N&#x2F;2 个数与第 1+N&#x2F;2 个数的均值。</p>\n<h3 id=\"解答思路-3\"><a href=\"#解答思路-3\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><p>如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 O(NlogN)。这里使用其他方法。</p>\n<h4 id=\"方法一：双堆法\"><a href=\"#方法一：双堆法\" class=\"headerlink\" title=\"方法一：双堆法\"></a>方法一：双堆法</h4><p>维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数<strong>小于等于</strong>小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。<br>若数据总数为<strong>偶数</strong>，当这两个堆建好之后，<strong>中位数就是这两个堆顶元素的平均值</strong>。当数据总数为<strong>奇数</strong>时，根据两个堆的大小，<strong>中位数一定在数据多的堆的堆顶</strong>。<br>以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法<strong>适用于数据量较小的情况</strong>。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了。</p>\n<h4 id=\"方法二：分治法\"><a href=\"#方法二：分治法\" class=\"headerlink\" title=\"方法二：分治法\"></a>方法二：分治法</h4><p>分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。<br>顺序读取这 5 亿个数字，对于读取到的数字 number，如果它对应的二进制中最高位为1，则把这个数字写到 file(1) 中，否则写入 file(0) 中。通过这一步，可以把这 5 亿个数划<strong>分为两部分</strong>，而且 file(0) 中的数都大于 file(1) 中的数（最高位是符号位）。<br>划分之后，可以非常容易地知道中位数是在 file(0) 还是 file(1) 中。假设 file(1) 中有 1 亿个数，那么中位数一定在 file(0) 中，且是在 file(0) 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。<br>由于5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 file(1) 有一亿个数，那么中位数就是 file(0) 中从第 1.5 亿个数开始的两个数求得的平均值。<br>对于 file(0) 可以用次高位的二进制继续将文件一分为二，如此划分下去，<strong>直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。</strong><br>当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。</p>\n<h1 id=\"大文件查询频度排序\"><a href=\"#大文件查询频度排序\" class=\"headerlink\" title=\"大文件查询频度排序\"></a>大文件查询频度排序</h1><h3 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。</p>\n<h3 id=\"解答思路-4\"><a href=\"#解答思路-4\" class=\"headerlink\" title=\"解答思路\"></a>解答思路</h3><p>如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。</p>\n<h4 id=\"方法一：HashMap-法\"><a href=\"#方法一：HashMap-法\" class=\"headerlink\" title=\"方法一：HashMap 法\"></a>方法一：HashMap 法</h4><p>如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。</p>\n<h4 id=\"方法二：分治法-1\"><a href=\"#方法二：分治法-1\" class=\"headerlink\" title=\"方法二：分治法\"></a>方法二：分治法</h4><p>分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。我们顺序遍历 10 个文件中的 query，通过 Hash 函数 hash(query) % 10 把这些 query 划分到 10 个小文件中。之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到零外一个单独文件中。<br>接着对所有文件按照 query 的次数进行排序，这里可以使用<strong>归并排序</strong>（由于无法把所有 query 都读入内存，因此需要使用<strong>外排序</strong>）。</p>\n<p><strong>如何理解外排序？</strong><br>例如，有一个含有 10000 个记录的文件，但是内存的可使用容量仅为 1000 个记录，毫无疑问需要使用外部排序算法，具体分为两步：</p>\n<ul>\n<li>将整个文件其等分为 10 个临时文件（每个文件中含有 1000 个记录），然后将这 10 个文件依次进入内存，采取适当的内存排序算法对其中的记录进行排序，将得到的有序文件（初始归并段）移至外存。</li>\n<li>对得到的 10 个初始归并段进行如图 1 的两两归并，直至得到一个完整的有序文件。<br><img src=\"https://cdn.staticaly.com/gh/1294566108/1294566108.github.io@release/images/outSourt.pkuo99qstj4.webp\" alt=\"image.png\"></li>\n</ul>\n<p><strong>注意：</strong> 在实际归并的过程中，由于内存容量的限制不能满足同时将 2 个归并段全部完整的读入内存进行归并，只能不断地取 2 个归并段中的每一小部分进行归并，通过不断地读数据和向外存写数据，直至 2 个归并段完成归并变为 1 个大的有序文件。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://cdn.staticaly.com/gh/1294566108/1294566108.github.io@release/images/outSourt.pkuo99qstj4.webp","popularPost_tmp_gaData":{"updated":"Tue Sep 12 2023 01:04:26 GMT+0800 (中国标准时间)","title":"海量数据处理场景","path":"2023/09/10/海量数据处理场景/","eyeCatchImage":"https://cdn.staticaly.com/gh/1294566108/1294566108.github.io@release/images/outSourt.pkuo99qstj4.webp","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-09-10T13:01:55.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-09-10T13:01:55.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["场景题"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"回顾 GSoC-2023RocketMQ 社区的一次申请","date":"2023-10-14T14:37:03.000Z","_content":"","source":"_posts/回顾GSoC-2023RocketMQ社区的一次申请.md","raw":"---\ntitle: 回顾 GSoC-2023RocketMQ 社区的一次申请\ndate: 2023-10-14 22:37:03\ntags:\n---\n","slug":"回顾GSoC-2023RocketMQ社区的一次申请","published":1,"updated":"2023-10-14T14:37:22.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnq567y900003oungkpvei0x","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Oct 14 2023 22:37:22 GMT+0800 (中国标准时间)","title":"回顾 GSoC-2023RocketMQ 社区的一次申请","path":"2023/10/14/回顾GSoC-2023RocketMQ社区的一次申请/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-10-14T14:37:03.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-10-14T14:37:03.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clmbyfolt0001x4unckpn5ti6","tag_id":"clmdh1ucr0000gkuna5pf5x92","_id":"clmdh1ucw0003gkune4ilc827"},{"post_id":"clmbymkoc0000p4un5vbo9wf7","tag_id":"clmdh1ucr0000gkuna5pf5x92","_id":"clmdh1ucx0004gkun3ryt2mt3"},{"post_id":"clmbv15gk0007ocun9eomcuam","tag_id":"clmdh1ucr0000gkuna5pf5x92","_id":"clmdh1ucx0005gkundswcbv8w"},{"post_id":"clmbyfolp0000x4un13tp70yc","tag_id":"clmdh1ucr0000gkuna5pf5x92","_id":"clmdh1ucx0006gkun1j7k0njz"},{"post_id":"clmehe4cn0000v0uncc9a7brm","tag_id":"clmehe4cw0001v0un2gnr771o","_id":"clmehe4cy0003v0un1a3o8gru"},{"post_id":"clnebhnw40002ioun7bz6chnx","tag_id":"clmehe4cy0002v0unhjz99meg","_id":"clnebhnw60003ioun2llr5n0t"},{"post_id":"clnebhnvy0000iounhmbp7std","tag_id":"clnebhnw10001ioundkw1hfkb","_id":"clnebhnw60004iounbgxt775f"}],"Tag":[{"name":"123","_id":"clmc838ai00007sung5fd4now"},{"name":"面经","_id":"clmdh1ucr0000gkuna5pf5x92"},{"name":"SOFA-JRaft","_id":"clmehe4cw0001v0un2gnr771o"},{"name":"场景题","_id":"clmehe4cy0002v0unhjz99meg"},{"name":"JVM虚拟机","_id":"clnebhnw10001ioundkw1hfkb"}]}}